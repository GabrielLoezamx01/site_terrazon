/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/gallery.js":
/*!*********************************!*\
  !*** ./resources/js/gallery.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n(function () {\n  Gallery = _defineProperty(_defineProperty({\n    dom: {},\n    width: 0,\n    height: 0,\n    // config: {\n    //     minWidth: 300,\n    //     minHeight: 300,\n    //     horizontalPadding: 80,\n    //     verticalPadding: 80,\n    //     leftArea: 0.20,\n    //     prefecth: 5\n    // },\n    config: {\n      minWidth: 300,\n      minHeight: 300,\n      horizontalPadding: 20,\n      // Reducido para móviles\n      verticalPadding: 20,\n      // Reducido para móviles\n      leftArea: 0.3,\n      // Aumentado para facilitar el toque\n      prefetch: 3 // Reducido para ahorrar datos en móviles\n    },\n    initDom: function initDom() {\n      Gallery.dom.overlay = e('div', 'gallery-overlay', document.body);\n      Gallery.dom.overlay.addEventListener('click', Gallery.close);\n      Gallery.dom.outer = e('div', 'gallery-outer', document.body);\n      Gallery.dom.inner = e('div', 'gallery-inner', Gallery.dom.outer);\n      Gallery.dom.screen = e('div', 'gallery-screen', Gallery.dom.inner);\n      Gallery.dom.screen.addEventListener('mousemove', Gallery.mousemove);\n      Gallery.dom.screen.addEventListener('click', Gallery.click);\n      Gallery.dom.left = e('div', 'gallery-left', Gallery.dom.screen);\n      Gallery.dom.right = e('div', 'gallery-right', Gallery.dom.screen);\n      Gallery.dom.image = e('img', 'gallery-image', Gallery.dom.screen);\n      Gallery.dom.fullscreen = e('div', 'gallery-fullscreen', Gallery.dom.screen);\n      Gallery.dom.fullscreen.addEventListener('click', Gallery.fullscreen);\n      if (!canFullScreen()) {\n        Gallery.dom.fullscreen.style.display = 'none';\n      }\n      Gallery.dom.bottombar = e('div', 'gallery-bottombar', Gallery.dom.screen);\n      Gallery.dom.count = e('span', 'gallery-count', Gallery.dom.bottombar);\n      Gallery.dom.close = e('a', 'gallery-close', Gallery.dom.bottombar);\n      Gallery.dom.close.innerHTML = 'Cerrar';\n      Gallery.dom.close.href = 'javascript:;';\n      Gallery.dom.close.addEventListener('click', Gallery.close);\n      Gallery.dom.original = e('a', 'gallery-original', Gallery.dom.bottombar);\n      Gallery.dom.original.target = '_blank';\n      Gallery.dom.original.innerHTML = 'Original';\n\n      // zoom\n\n      Gallery.dom.zoomControls = e('div', 'gallery-zoom-controls', Gallery.dom.screen);\n      Gallery.dom.zoomIn = e('button', 'gallery-zoom-in', Gallery.dom.bottombar);\n      Gallery.dom.zoomIn.innerHTML = '+';\n      Gallery.dom.zoomIn.addEventListener('click', function (event) {\n        event.stopPropagation();\n        Gallery.zoom(1.5);\n      });\n      Gallery.dom.zoomOut = e('button', 'gallery-zoom-out', Gallery.dom.bottombar);\n      Gallery.dom.zoomOut.innerHTML = '-';\n      Gallery.dom.zoomOut.addEventListener('click', function (event) {\n        event.stopPropagation();\n        Gallery.zoom(1 / 1.5);\n      });\n\n      //\n\n      Gallery.dom.img = document.createElement('img');\n      Gallery.dom.img.onload = function () {\n        Gallery.dom.image.src = Gallery.images[Gallery.current].href;\n        Gallery.dom.image.style.display = 'block';\n        Gallery.resize();\n      };\n      Gallery.dom.screen.addEventListener('touchstart', Gallery.touchstart, {\n        passive: false\n      });\n      Gallery.dom.screen.addEventListener('touchmove', Gallery.touchmove, {\n        passive: false\n      });\n      Gallery.dom.screen.addEventListener('touchend', Gallery.touchend);\n      window.addEventListener('orientationchange', Gallery.resize);\n      window.addEventListener('resize', Gallery.resize);\n      window.addEventListener('keydown', function (event) {\n        if (Gallery.dom.overlay.style.display !== 'block') {\n          // Don't do anything when the gallery isn't displayed\n          return;\n        }\n\n        // Right\n        if (event.keyCode === 39) {\n          Gallery.change(+1);\n        }\n\n        // Left\n        if (event.keyCode === 37) {\n          Gallery.change(-1);\n        }\n\n        // Escape\n        if (event.keyCode === 27) {\n          Gallery.close();\n        }\n      });\n\n      // Do not initialize the DOM more than once\n      Gallery.initDom = function () {};\n    },\n    init: function init() {\n      var links = document.querySelectorAll('.gallery[id] a');\n      Array.prototype.forEach.call(links, function (elem) {\n        elem.removeEventListener('click', Gallery.showEvent);\n        elem.addEventListener('click', Gallery.showEvent);\n      });\n\n      // Retrieve #image=name:pos in the URL\n      var start = document.location.hash.indexOf('image=');\n      if (start !== -1) {\n        var hash = document.location.hash;\n        var parts = hash.substr(start + 'image='.length).split(':');\n        var gallery = document.getElementById('gallery-' + parts[0]);\n        if (gallery) {\n          var link = gallery.querySelectorAll('a')[parts[1] - 1];\n          if (link) {\n            // If we found the gallery and image, then show the gallery\n            Gallery.show(link);\n          }\n        }\n      }\n    },\n    getOffsetX: function getOffsetX(event) {\n      var offsetX = event.offsetX;\n      if (event.offsetX === undefined) {\n        // Using deprecated attributes on Firefox\n        offsetX = event.layerX;\n      }\n      var target = event.target;\n      while (target !== Gallery.dom.screen) {\n        offsetX += target.offsetLeft;\n        target = target.parentElement;\n      }\n      return offsetX;\n    },\n    isBottomBar: function isBottomBar(event) {\n      var target = event.target;\n      while (target !== Gallery.dom.screen) {\n        if (target === Gallery.dom.bottombar) {\n          return true;\n        }\n        target = target.parentElement;\n      }\n      return false;\n    },\n    zoom: function zoom(factor) {\n      var newScale = Gallery.currentScale * factor;\n      newScale = Math.max(1, Math.min(newScale, 10)); // Limita el zoom entre 1x y 3x\n      Gallery.setImageScale(newScale);\n    },\n    mousemove: function mousemove(event) {\n      // Highlight the Left or Right arrow\n      if (Gallery.isBottomBar(event) || event.target === Gallery.dom.fullscreen) {\n        Gallery.dom.left.className = 'gallery-left';\n        Gallery.dom.right.className = 'gallery-right';\n      } else if (Gallery.getOffsetX(event) < Gallery.width * Gallery.config.leftArea) {\n        Gallery.dom.left.className = 'gallery-left gallery-active';\n        Gallery.dom.right.className = 'gallery-right';\n      } else {\n        Gallery.dom.left.className = 'gallery-left';\n        Gallery.dom.right.className = 'gallery-right gallery-active';\n      }\n    },\n    click: function click(event) {\n      if (Gallery.isBottomBar(event)) {\n        return;\n      } else if (Gallery.getOffsetX(event) < Gallery.width * Gallery.config.leftArea) {\n        Gallery.change(-1);\n      } else {\n        Gallery.change(+1);\n      }\n    },\n    change: function change(delta) {\n      Gallery.current = mod(Gallery.current + delta, Gallery.images.length);\n      Gallery.update();\n    },\n    update: function update() {\n      Gallery.dom.count.innerHTML = Gallery.current + 1 + ' of ' + Gallery.images.length;\n      Gallery.dom.img.src = Gallery.images[Gallery.current].href;\n      Gallery.dom.original.href = Gallery.images[Gallery.current].href;\n      document.location.hash = 'image=' + Gallery.id + ':' + (Gallery.current + 1);\n      Gallery.dom.image.style.display = 'none';\n      Gallery.resize();\n      Gallery.dom.image.style.transform = 'translate(0px, 0px) scale(1)';\n      Gallery.currentScale = 1;\n\n      // Prefetch the next N image\n      for (var i = 0; i < Gallery.config.prefecth; ++i) {\n        var next = mod(Gallery.current + i + 1, Gallery.images.length);\n        new Image().src = Gallery.images[next];\n      }\n    },\n    fullscreen: function fullscreen(event) {\n      goFullScreen(Gallery.dom.inner);\n      event.stopPropagation();\n    },\n    resize: function resize() {\n      if (isFullScreen()) {\n        // Make the gallery at the top left and full width/height\n        Gallery.dom.inner.style.left = '0';\n        Gallery.dom.inner.style.top = '0';\n        Gallery.width = window.innerWidth;\n        Gallery.height = window.innerHeight;\n\n        // Hide the full screen icon\n        Gallery.dom.fullscreen.style.display = 'none';\n      } else {\n        // The dimension must be (in order of priority)\n        // - At least the minimum dimensions\n        // - Keep a padding on the window\n        // - Equal or larger than the previous dimensions\n        // - The dimension of the image\n        Gallery.width = Math.max(Gallery.config.minWidth, Math.min(Math.max(Gallery.width, Gallery.dom.img.width), window.innerWidth - Gallery.config.horizontalPadding));\n        Gallery.height = Math.max(Gallery.config.minHeight, Math.min(Math.max(Gallery.height, Gallery.dom.img.height), window.innerHeight - Gallery.config.verticalPadding));\n\n        // Top left of inner initially is at the middle of the screen due to\n        // the CSS hack. Put a negative position to make it at the right spot\n        Gallery.dom.inner.style.left = -Gallery.width / 2 + 'px';\n        Gallery.dom.inner.style.top = -Gallery.height / 2 + 'px';\n        if (canFullScreen()) {\n          // Show the full screen icon\n          Gallery.dom.fullscreen.style.display = 'block';\n        }\n      }\n      Gallery.dom.inner.style.width = Gallery.width + 'px';\n      Gallery.dom.inner.style.height = Gallery.height + 'px';\n\n      // Find the image dimensions given the gallery size\n      var ratio = Gallery.dom.img.width / Gallery.dom.img.height;\n      var width, height;\n      if (Gallery.width < Gallery.dom.img.width || Gallery.height < Gallery.dom.img.height) {\n        // If the gallery is smaller than the image.\n        // Try to fit the image in the width and see what the height is\n        width = Gallery.width;\n        height = Gallery.width / ratio;\n        if (height > Gallery.height) {\n          // If the height doesn't fit, then we should resize for height\n          width = Gallery.height * ratio;\n          height = Gallery.height;\n        }\n      } else {\n        // The gallery is large enough to hold the image, good!\n        width = Gallery.dom.img.width;\n        height = Gallery.dom.img.height;\n      }\n      Gallery.dom.image.width = width;\n      Gallery.dom.image.height = height;\n\n      // Move the image is the center of the gallery\n      Gallery.dom.image.style.left = Gallery.width / 2 - width / 2 + 'px';\n      Gallery.dom.image.style.top = Gallery.height / 2 - height / 2 + 'px';\n\n      // Update the height of the overlay\n      // Gallery.dom.overlay.style.height = window.innerHeight + 'px';\n      Gallery.dom.overlay.style.height = '100vh';\n    },\n    close: function close() {\n      // Hide the gallery\n      Gallery.dom.overlay.style.display = 'none';\n      Gallery.dom.outer.style.display = 'none';\n\n      // Reset the minimal width/height the gallery can take\n      Gallery.width = 0;\n      Gallery.height = 0;\n\n      // Clean up\n      cancelFullScreen();\n      document.location.hash = '_';\n      Gallery.dom.img.src = '';\n    },\n    show: function show(target) {\n      // Bubble up until we find the <a> that triggered the event\n      var link = target;\n      while (link.nodeName !== 'A') {\n        link = link.parentElement;\n      }\n\n      // Bubble up until we find the enclosing gallery\n      var gallery = target.parentElement;\n      while (gallery.className.indexOf('gallery') === -1) {\n        gallery = gallery.parentElement;\n      }\n\n      // Set up state\n      Gallery.id = gallery.id.replace(/^gallery-/, '');\n      Gallery.images = gallery.querySelectorAll('a');\n      Gallery.current = Array.prototype.indexOf.call(Gallery.images, link);\n      Gallery.initDom();\n      Gallery.update();\n\n      // Display the gallery\n      Gallery.dom.overlay.style.display = 'block';\n      Gallery.dom.outer.style.display = 'block';\n    },\n    showEvent: function showEvent(event) {\n      // Only left click\n      if (event.button !== 0 || event.ctrlKey || event.metaKey) {\n        return;\n      }\n      Gallery.show(event.target);\n\n      // Put it at the end so that it \"gracefully\" degrade if the browser sucks\n      event.preventDefault();\n    },\n    touchstart: function touchstart(event) {\n      Gallery.touchStartTime = new Date().getTime();\n      Gallery.touchStartX = event.touches[0].clientX;\n      Gallery.touchStartY = event.touches[0].clientY;\n      Gallery.lastTouchX = Gallery.touchStartX;\n      Gallery.lastTouchY = Gallery.touchStartY;\n      Gallery.isTouching = true;\n      Gallery.hasMoved = false;\n      if (event.touches.length === 2) {\n        event.preventDefault();\n        Gallery.zooming = true;\n        Gallery.startDistance = Gallery.getDistance(event.touches[0], event.touches[1]);\n        Gallery.startScale = Gallery.currentScale || 1;\n      } else {\n        Gallery.zooming = false;\n        // Iniciar el arrastre continuo\n        Gallery.startDrag();\n      }\n    },\n    touchmove: function touchmove(event) {\n      if (Gallery.zooming && event.touches.length === 2) {\n        event.preventDefault();\n        var newDistance = Gallery.getDistance(event.touches[0], event.touches[1]);\n        var scale = newDistance / Gallery.startDistance * Gallery.startScale;\n        Gallery.setImageScale(scale);\n      } else if (event.touches.length === 1) {\n        var touchMoveX = event.touches[0].clientX;\n        var touchMoveY = event.touches[0].clientY;\n        Gallery.lastTouchX = touchMoveX;\n        Gallery.lastTouchY = touchMoveY;\n        if (Math.abs(touchMoveX - Gallery.touchStartX) > 10 || Math.abs(touchMoveY - Gallery.touchStartY) > 10) {\n          Gallery.hasMoved = true;\n        }\n      }\n    },\n    touchend: function touchend(event) {\n      var touchEndTime = new Date().getTime();\n      var touchTime = touchEndTime - Gallery.touchStartTime;\n      if (Gallery.zooming) {\n        Gallery.zooming = false;\n        Gallery.currentScale = Gallery.getImageScale();\n      } else if (!Gallery.hasMoved && touchTime < 300) {\n        // var touchEndX = event.changedTouches[0].clientX;\n        // if (touchEndX < Gallery.width * Gallery.config.leftArea) {\n        //   Gallery.change(-1);\n        // } else {\n        //   Gallery.change(+1);\n        // }\n      }\n      Gallery.isTouching = false;\n      Gallery.hasMoved = false;\n      Gallery.stopDrag();\n    },\n    startDrag: function startDrag() {\n      if (!Gallery.dragInterval) {\n        Gallery.dragInterval = setInterval(function () {\n          if (Gallery.isTouching && Gallery.currentScale > 1) {\n            var deltaX = Gallery.lastTouchX - Gallery.touchStartX;\n            var deltaY = Gallery.lastTouchY - Gallery.touchStartY;\n            Gallery.panImage(deltaX, deltaY);\n            Gallery.touchStartX = Gallery.lastTouchX;\n            Gallery.touchStartY = Gallery.lastTouchY;\n          }\n        }, 16); // Aproximadamente 60 FPS\n      }\n    },\n    stopDrag: function stopDrag() {\n      if (Gallery.dragInterval) {\n        clearInterval(Gallery.dragInterval);\n        Gallery.dragInterval = null;\n      }\n    },\n    panImage: function panImage(deltaX, deltaY) {\n      var img = Gallery.dom.image;\n      var rect = img.getBoundingClientRect();\n      var containerRect = Gallery.dom.screen.getBoundingClientRect();\n\n      // Obtener la traslación actual\n      var currentTransform = img.style.transform || '';\n      var currentTranslate = currentTransform.match(/translate\\((.*?)\\)/) || ['', '0px, 0px'];\n      var _currentTranslate$1$s = currentTranslate[1].split(',').map(function (val) {\n          return parseFloat(val) || 0;\n        }),\n        _currentTranslate$1$s2 = _slicedToArray(_currentTranslate$1$s, 2),\n        currentX = _currentTranslate$1$s2[0],\n        currentY = _currentTranslate$1$s2[1];\n\n      // Calcular la nueva posición\n      var newX = currentX + deltaX;\n      var newY = currentY + deltaY;\n\n      // Calcular los límites de movimiento\n      var maxX = Math.max(0, (rect.width - containerRect.width) / 2);\n      var maxY = Math.max(0, (rect.height - containerRect.height) / 2);\n\n      // Limitar el movimiento\n      newX = Math.max(-maxX, Math.min(newX, maxX));\n      newY = Math.max(-maxY, Math.min(newY, maxY));\n\n      // Aplicar la nueva transformación\n      img.style.transform = \"translate(\".concat(newX, \"px, \").concat(newY, \"px) scale(\").concat(Gallery.currentScale, \")\");\n    },\n    setImageScale: function setImageScale(scale) {\n      // scale = Math.max(1, Math.min(scale, 5)); // Limita el zoom entre 1x y 3x\n      Gallery.currentScale = scale;\n      var img = Gallery.dom.image;\n      var currentTransform = img.style.transform || '';\n      var currentTranslate = currentTransform.match(/translate\\((.*?)\\)/) || ['translate(0px, 0px)'];\n      img.style.transform = \"\".concat(currentTranslate[0], \" scale(\").concat(scale, \")\");\n      Gallery.updateZoomButtons();\n    },\n    updateZoomButtons: function updateZoomButtons() {\n      if (Gallery.currentScale <= 1) {\n        Gallery.dom.zoomOut.style.opacity = '0.5';\n        Gallery.dom.zoomOut.disabled = true;\n      } else {\n        Gallery.dom.zoomOut.style.opacity = '1';\n        Gallery.dom.zoomOut.disabled = false;\n      }\n      if (Gallery.currentScale >= 10) {\n        Gallery.dom.zoomIn.style.opacity = '0.5';\n        Gallery.dom.zoomIn.disabled = true;\n      } else {\n        Gallery.dom.zoomIn.style.opacity = '1';\n        Gallery.dom.zoomIn.disabled = false;\n      }\n    }\n  }, \"change\", function change(delta) {\n    var nextIndex = mod(Gallery.current + delta, Gallery.images.length);\n    var nextImg = new Image();\n    nextImg.onload = function () {\n      Gallery.current = nextIndex;\n      Gallery.dom.image.src = nextImg.src;\n      Gallery.update();\n    };\n    nextImg.src = Gallery.images[nextIndex].href;\n  }), \"getDistance\", function getDistance(touch1, touch2) {\n    var dx = touch1.clientX - touch2.clientX;\n    var dy = touch1.clientY - touch2.clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n  });\n  document.addEventListener('DOMContentLoaded', Gallery.init);\n\n  // Utilities\n\n  // Full Screen\n\n  function canFullScreen() {\n    return document.body.webkitRequestFullScreen || document.body.requestFullScreen || document.body.mozRequestFullScreen;\n  }\n  function isFullScreen() {\n    return document.fullScreenElement || document.mozFullScreen || document.webkitIsFullScreen;\n  }\n  function goFullScreen(elem) {\n    if (elem.requestFullScreen) {\n      elem.requestFullScreen();\n    } else if (elem.mozRequestFullScreen) {\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullScreen) {\n      elem.webkitRequestFullScreen();\n    }\n  }\n  function cancelFullScreen() {\n    if (document.cancelFullScreen) {\n      document.cancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    }\n  }\n\n  // Small DOM constructor\n\n  function e(name, className, parent) {\n    var elem = document.createElement(name);\n    parent.appendChild(elem);\n    if (className) {\n      elem.className = className;\n    }\n    return elem;\n  }\n\n  // Modulo that works with negative numbers\n\n  function mod(a, b) {\n    return (a % b + b) % b;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZ2FsbGVyeS5qcyIsIm5hbWVzIjpbIkdhbGxlcnkiLCJfZGVmaW5lUHJvcGVydHkiLCJkb20iLCJ3aWR0aCIsImhlaWdodCIsImNvbmZpZyIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwiaG9yaXpvbnRhbFBhZGRpbmciLCJ2ZXJ0aWNhbFBhZGRpbmciLCJsZWZ0QXJlYSIsInByZWZldGNoIiwiaW5pdERvbSIsIm92ZXJsYXkiLCJlIiwiZG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsb3NlIiwib3V0ZXIiLCJpbm5lciIsInNjcmVlbiIsIm1vdXNlbW92ZSIsImNsaWNrIiwibGVmdCIsInJpZ2h0IiwiaW1hZ2UiLCJmdWxsc2NyZWVuIiwiY2FuRnVsbFNjcmVlbiIsInN0eWxlIiwiZGlzcGxheSIsImJvdHRvbWJhciIsImNvdW50IiwiaW5uZXJIVE1MIiwiaHJlZiIsIm9yaWdpbmFsIiwidGFyZ2V0Iiwiem9vbUNvbnRyb2xzIiwiem9vbUluIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJ6b29tIiwiem9vbU91dCIsImltZyIsImNyZWF0ZUVsZW1lbnQiLCJvbmxvYWQiLCJzcmMiLCJpbWFnZXMiLCJjdXJyZW50IiwicmVzaXplIiwidG91Y2hzdGFydCIsInBhc3NpdmUiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsIndpbmRvdyIsImtleUNvZGUiLCJjaGFuZ2UiLCJpbml0IiwibGlua3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJmb3JFYWNoIiwiY2FsbCIsImVsZW0iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2hvd0V2ZW50Iiwic3RhcnQiLCJsb2NhdGlvbiIsImhhc2giLCJpbmRleE9mIiwicGFydHMiLCJzdWJzdHIiLCJsZW5ndGgiLCJzcGxpdCIsImdhbGxlcnkiLCJnZXRFbGVtZW50QnlJZCIsImxpbmsiLCJzaG93IiwiZ2V0T2Zmc2V0WCIsIm9mZnNldFgiLCJ1bmRlZmluZWQiLCJsYXllclgiLCJvZmZzZXRMZWZ0IiwicGFyZW50RWxlbWVudCIsImlzQm90dG9tQmFyIiwiZmFjdG9yIiwibmV3U2NhbGUiLCJjdXJyZW50U2NhbGUiLCJNYXRoIiwibWF4IiwibWluIiwic2V0SW1hZ2VTY2FsZSIsImNsYXNzTmFtZSIsImRlbHRhIiwibW9kIiwidXBkYXRlIiwiaWQiLCJ0cmFuc2Zvcm0iLCJpIiwicHJlZmVjdGgiLCJuZXh0IiwiSW1hZ2UiLCJnb0Z1bGxTY3JlZW4iLCJpc0Z1bGxTY3JlZW4iLCJ0b3AiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJyYXRpbyIsImNhbmNlbEZ1bGxTY3JlZW4iLCJub2RlTmFtZSIsInJlcGxhY2UiLCJidXR0b24iLCJjdHJsS2V5IiwibWV0YUtleSIsInByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydFRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInRvdWNoU3RhcnRYIiwidG91Y2hlcyIsImNsaWVudFgiLCJ0b3VjaFN0YXJ0WSIsImNsaWVudFkiLCJsYXN0VG91Y2hYIiwibGFzdFRvdWNoWSIsImlzVG91Y2hpbmciLCJoYXNNb3ZlZCIsInpvb21pbmciLCJzdGFydERpc3RhbmNlIiwiZ2V0RGlzdGFuY2UiLCJzdGFydFNjYWxlIiwic3RhcnREcmFnIiwibmV3RGlzdGFuY2UiLCJzY2FsZSIsInRvdWNoTW92ZVgiLCJ0b3VjaE1vdmVZIiwiYWJzIiwidG91Y2hFbmRUaW1lIiwidG91Y2hUaW1lIiwiZ2V0SW1hZ2VTY2FsZSIsInN0b3BEcmFnIiwiZHJhZ0ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJkZWx0YVgiLCJkZWx0YVkiLCJwYW5JbWFnZSIsImNsZWFySW50ZXJ2YWwiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY29udGFpbmVyUmVjdCIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50VHJhbnNsYXRlIiwibWF0Y2giLCJfY3VycmVudFRyYW5zbGF0ZSQxJHMiLCJtYXAiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiX2N1cnJlbnRUcmFuc2xhdGUkMSRzMiIsIl9zbGljZWRUb0FycmF5IiwiY3VycmVudFgiLCJjdXJyZW50WSIsIm5ld1giLCJuZXdZIiwibWF4WCIsIm1heFkiLCJjb25jYXQiLCJ1cGRhdGVab29tQnV0dG9ucyIsIm9wYWNpdHkiLCJkaXNhYmxlZCIsIm5leHRJbmRleCIsIm5leHRJbWciLCJ0b3VjaDEiLCJ0b3VjaDIiLCJkeCIsImR5Iiwic3FydCIsIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuIiwicmVxdWVzdEZ1bGxTY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsImZ1bGxTY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbiIsIndlYmtpdElzRnVsbFNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJ3ZWJraXRDYW5jZWxGdWxsU2NyZWVuIiwibmFtZSIsInBhcmVudCIsImFwcGVuZENoaWxkIiwiYSIsImIiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9nYWxsZXJ5LmpzPzNlOGMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICBHYWxsZXJ5ID0ge1xyXG4gICAgICAgIGRvbToge30sXHJcbiAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgIC8vIGNvbmZpZzoge1xyXG4gICAgICAgIC8vICAgICBtaW5XaWR0aDogMzAwLFxyXG4gICAgICAgIC8vICAgICBtaW5IZWlnaHQ6IDMwMCxcclxuICAgICAgICAvLyAgICAgaG9yaXpvbnRhbFBhZGRpbmc6IDgwLFxyXG4gICAgICAgIC8vICAgICB2ZXJ0aWNhbFBhZGRpbmc6IDgwLFxyXG4gICAgICAgIC8vICAgICBsZWZ0QXJlYTogMC4yMCxcclxuICAgICAgICAvLyAgICAgcHJlZmVjdGg6IDVcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICBtaW5XaWR0aDogMzAwLFxyXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IDMwMCxcclxuICAgICAgICAgICAgaG9yaXpvbnRhbFBhZGRpbmc6IDIwLCAvLyBSZWR1Y2lkbyBwYXJhIG3Ds3ZpbGVzXHJcbiAgICAgICAgICAgIHZlcnRpY2FsUGFkZGluZzogMjAsIC8vIFJlZHVjaWRvIHBhcmEgbcOzdmlsZXNcclxuICAgICAgICAgICAgbGVmdEFyZWE6IDAuMywgLy8gQXVtZW50YWRvIHBhcmEgZmFjaWxpdGFyIGVsIHRvcXVlXHJcbiAgICAgICAgICAgIHByZWZldGNoOiAzIC8vIFJlZHVjaWRvIHBhcmEgYWhvcnJhciBkYXRvcyBlbiBtw7N2aWxlc1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXREb206IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20ub3ZlcmxheSA9IGUoJ2RpdicsICdnYWxsZXJ5LW92ZXJsYXknLCBkb2N1bWVudC5ib2R5KTtcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20ub3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEdhbGxlcnkuY2xvc2UpO1xyXG5cclxuICAgICAgICAgICAgR2FsbGVyeS5kb20ub3V0ZXIgPSBlKCdkaXYnLCAnZ2FsbGVyeS1vdXRlcicsIGRvY3VtZW50LmJvZHkpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lciA9IGUoJ2RpdicsICdnYWxsZXJ5LWlubmVyJywgR2FsbGVyeS5kb20ub3V0ZXIpO1xyXG5cclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uc2NyZWVuID0gZSgnZGl2JywgJ2dhbGxlcnktc2NyZWVuJywgR2FsbGVyeS5kb20uaW5uZXIpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5zY3JlZW4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgR2FsbGVyeS5tb3VzZW1vdmUpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5zY3JlZW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBHYWxsZXJ5LmNsaWNrKTtcclxuXHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmxlZnQgPSBlKCdkaXYnLCAnZ2FsbGVyeS1sZWZ0JywgR2FsbGVyeS5kb20uc2NyZWVuKTtcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20ucmlnaHQgPSBlKCdkaXYnLCAnZ2FsbGVyeS1yaWdodCcsIEdhbGxlcnkuZG9tLnNjcmVlbik7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltYWdlID0gZSgnaW1nJywgJ2dhbGxlcnktaW1hZ2UnLCBHYWxsZXJ5LmRvbS5zY3JlZW4pO1xyXG5cclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uZnVsbHNjcmVlbiA9IGUoJ2RpdicsICdnYWxsZXJ5LWZ1bGxzY3JlZW4nLCBHYWxsZXJ5LmRvbS5zY3JlZW4pO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5mdWxsc2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgR2FsbGVyeS5mdWxsc2NyZWVuKTtcclxuICAgICAgICAgICAgaWYgKCFjYW5GdWxsU2NyZWVuKCkpIHtcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmZ1bGxzY3JlZW4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uYm90dG9tYmFyID0gZSgnZGl2JywgJ2dhbGxlcnktYm90dG9tYmFyJywgR2FsbGVyeS5kb20uc2NyZWVuKTtcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uY291bnQgPSBlKCdzcGFuJywgJ2dhbGxlcnktY291bnQnLCBHYWxsZXJ5LmRvbS5ib3R0b21iYXIpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5jbG9zZSA9IGUoJ2EnLCAnZ2FsbGVyeS1jbG9zZScsIEdhbGxlcnkuZG9tLmJvdHRvbWJhcik7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmNsb3NlLmlubmVySFRNTCA9ICdDZXJyYXInO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5jbG9zZS5ocmVmID0gJ2phdmFzY3JpcHQ6Oyc7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgR2FsbGVyeS5jbG9zZSk7XHJcblxyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vcmlnaW5hbCA9IGUoJ2EnLCAnZ2FsbGVyeS1vcmlnaW5hbCcsIEdhbGxlcnkuZG9tLmJvdHRvbWJhcik7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm9yaWdpbmFsLnRhcmdldCA9ICdfYmxhbmsnO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vcmlnaW5hbC5pbm5lckhUTUwgPSAnT3JpZ2luYWwnO1xyXG5cclxuICAgICAgICAgICAgICAvLyB6b29tXHJcblxyXG4gICAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21Db250cm9scyA9IGUoJ2RpdicsICdnYWxsZXJ5LXpvb20tY29udHJvbHMnLCBHYWxsZXJ5LmRvbS5zY3JlZW4pO1xyXG4gICAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21JbiA9IGUoJ2J1dHRvbicsICdnYWxsZXJ5LXpvb20taW4nLCBHYWxsZXJ5LmRvbS5ib3R0b21iYXIpO1xyXG4gICAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21Jbi5pbm5lckhUTUwgPSAnKyc7XHJcbiAgICAgICAgICAgICAgR2FsbGVyeS5kb20uem9vbUluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgR2FsbGVyeS56b29tKDEuNSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS56b29tT3V0ID0gZSgnYnV0dG9uJywgJ2dhbGxlcnktem9vbS1vdXQnLCBHYWxsZXJ5LmRvbS5ib3R0b21iYXIpO1xyXG4gICAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21PdXQuaW5uZXJIVE1MID0gJy0nO1xyXG4gICAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21PdXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5Lnpvb20oMS8xLjUpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gIFxyXG4gICAgICAgICAgICAgIC8vXHJcblxyXG5cclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5zcmMgPSBHYWxsZXJ5LmltYWdlc1tHYWxsZXJ5LmN1cnJlbnRdLmhyZWY7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5zY3JlZW4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIEdhbGxlcnkudG91Y2hzdGFydCwge1xyXG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnNjcmVlbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBHYWxsZXJ5LnRvdWNobW92ZSwge1xyXG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnNjcmVlbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIEdhbGxlcnkudG91Y2hlbmQpO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgR2FsbGVyeS5yZXNpemUpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgR2FsbGVyeS5yZXNpemUpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKEdhbGxlcnkuZG9tLm92ZXJsYXkuc3R5bGUuZGlzcGxheSAhPT0gJ2Jsb2NrJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIHdoZW4gdGhlIGdhbGxlcnkgaXNuJ3QgZGlzcGxheWVkXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJpZ2h0XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzkpIHtcclxuICAgICAgICAgICAgICAgICAgICBHYWxsZXJ5LmNoYW5nZSgrMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTGVmdFxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5jaGFuZ2UoLTEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVzY2FwZVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIERvIG5vdCBpbml0aWFsaXplIHRoZSBET00gbW9yZSB0aGFuIG9uY2VcclxuICAgICAgICAgICAgR2FsbGVyeS5pbml0RG9tID0gZnVuY3Rpb24gKCkge307XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FsbGVyeVtpZF0gYScpO1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGxpbmtzLCBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIEdhbGxlcnkuc2hvd0V2ZW50KTtcclxuICAgICAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBHYWxsZXJ5LnNob3dFdmVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gUmV0cmlldmUgI2ltYWdlPW5hbWU6cG9zIGluIHRoZSBVUkxcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5pbmRleE9mKCdpbWFnZT0nKTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gaGFzaC5zdWJzdHIoc3RhcnQgKyAnaW1hZ2U9Jy5sZW5ndGgpLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ2FsbGVyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYWxsZXJ5LScgKyBwYXJ0c1swXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FsbGVyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gZ2FsbGVyeS5xdWVyeVNlbGVjdG9yQWxsKCdhJylbcGFydHNbMV0gLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGluaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBmb3VuZCB0aGUgZ2FsbGVyeSBhbmQgaW1hZ2UsIHRoZW4gc2hvdyB0aGUgZ2FsbGVyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBHYWxsZXJ5LnNob3cobGluayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0T2Zmc2V0WDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBvZmZzZXRYID0gZXZlbnQub2Zmc2V0WDtcclxuICAgICAgICAgICAgaWYgKGV2ZW50Lm9mZnNldFggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVXNpbmcgZGVwcmVjYXRlZCBhdHRyaWJ1dGVzIG9uIEZpcmVmb3hcclxuICAgICAgICAgICAgICAgIG9mZnNldFggPSBldmVudC5sYXllclg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAhPT0gR2FsbGVyeS5kb20uc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRYICs9IHRhcmdldC5vZmZzZXRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9mZnNldFg7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNCb3R0b21CYXI6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSBHYWxsZXJ5LmRvbS5zY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IEdhbGxlcnkuZG9tLmJvdHRvbWJhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgem9vbTogZnVuY3Rpb24oZmFjdG9yKSB7XHJcbiAgICAgICAgICB2YXIgbmV3U2NhbGUgPSBHYWxsZXJ5LmN1cnJlbnRTY2FsZSAqIGZhY3RvcjtcclxuICAgICAgICAgIG5ld1NjYWxlID0gTWF0aC5tYXgoMSwgTWF0aC5taW4obmV3U2NhbGUsIDEwKSk7IC8vIExpbWl0YSBlbCB6b29tIGVudHJlIDF4IHkgM3hcclxuICAgICAgICAgIEdhbGxlcnkuc2V0SW1hZ2VTY2FsZShuZXdTY2FsZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbW91c2Vtb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBMZWZ0IG9yIFJpZ2h0IGFycm93XHJcbiAgICAgICAgICAgIGlmIChHYWxsZXJ5LmlzQm90dG9tQmFyKGV2ZW50KSB8fCBldmVudC50YXJnZXQgPT09IEdhbGxlcnkuZG9tLmZ1bGxzY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmxlZnQuY2xhc3NOYW1lID0gJ2dhbGxlcnktbGVmdCc7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5yaWdodC5jbGFzc05hbWUgPSAnZ2FsbGVyeS1yaWdodCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoR2FsbGVyeS5nZXRPZmZzZXRYKGV2ZW50KSA8IEdhbGxlcnkud2lkdGggKiBHYWxsZXJ5LmNvbmZpZy5sZWZ0QXJlYSkge1xyXG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20ubGVmdC5jbGFzc05hbWUgPSAnZ2FsbGVyeS1sZWZ0IGdhbGxlcnktYWN0aXZlJztcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLnJpZ2h0LmNsYXNzTmFtZSA9ICdnYWxsZXJ5LXJpZ2h0JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmxlZnQuY2xhc3NOYW1lID0gJ2dhbGxlcnktbGVmdCc7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5yaWdodC5jbGFzc05hbWUgPSAnZ2FsbGVyeS1yaWdodCBnYWxsZXJ5LWFjdGl2ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChHYWxsZXJ5LmlzQm90dG9tQmFyKGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEdhbGxlcnkuZ2V0T2Zmc2V0WChldmVudCkgPCBHYWxsZXJ5LndpZHRoICogR2FsbGVyeS5jb25maWcubGVmdEFyZWEpIHtcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuY2hhbmdlKC0xKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuY2hhbmdlKCsxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGRlbHRhKSB7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuY3VycmVudCA9IG1vZChHYWxsZXJ5LmN1cnJlbnQgKyBkZWx0YSwgR2FsbGVyeS5pbWFnZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgR2FsbGVyeS51cGRhdGUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uY291bnQuaW5uZXJIVE1MID0gKEdhbGxlcnkuY3VycmVudCArIDEpICsgJyBvZiAnICsgR2FsbGVyeS5pbWFnZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWcuc3JjID0gR2FsbGVyeS5pbWFnZXNbR2FsbGVyeS5jdXJyZW50XS5ocmVmO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vcmlnaW5hbC5ocmVmID0gR2FsbGVyeS5pbWFnZXNbR2FsbGVyeS5jdXJyZW50XS5ocmVmO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gJ2ltYWdlPScgKyBHYWxsZXJ5LmlkICsgJzonICsgKEdhbGxlcnkuY3VycmVudCArIDEpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LnJlc2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1hZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwcHgsIDBweCkgc2NhbGUoMSknO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmN1cnJlbnRTY2FsZSA9IDE7XHJcblxyXG4gICAgICAgICAgICAvLyBQcmVmZXRjaCB0aGUgbmV4dCBOIGltYWdlXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgR2FsbGVyeS5jb25maWcucHJlZmVjdGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBtb2QoR2FsbGVyeS5jdXJyZW50ICsgaSArIDEsIEdhbGxlcnkuaW1hZ2VzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBuZXcgSW1hZ2UoKS5zcmMgPSBHYWxsZXJ5LmltYWdlc1tuZXh0XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZ1bGxzY3JlZW46IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBnb0Z1bGxTY3JlZW4oR2FsbGVyeS5kb20uaW5uZXIpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGlzRnVsbFNjcmVlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHRoZSBnYWxsZXJ5IGF0IHRoZSB0b3AgbGVmdCBhbmQgZnVsbCB3aWR0aC9oZWlnaHRcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmlubmVyLnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS50b3AgPSAnMCc7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBIaWRlIHRoZSBmdWxsIHNjcmVlbiBpY29uXHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5mdWxsc2NyZWVuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgZGltZW5zaW9uIG11c3QgYmUgKGluIG9yZGVyIG9mIHByaW9yaXR5KVxyXG4gICAgICAgICAgICAgICAgLy8gLSBBdCBsZWFzdCB0aGUgbWluaW11bSBkaW1lbnNpb25zXHJcbiAgICAgICAgICAgICAgICAvLyAtIEtlZXAgYSBwYWRkaW5nIG9uIHRoZSB3aW5kb3dcclxuICAgICAgICAgICAgICAgIC8vIC0gRXF1YWwgb3IgbGFyZ2VyIHRoYW4gdGhlIHByZXZpb3VzIGRpbWVuc2lvbnNcclxuICAgICAgICAgICAgICAgIC8vIC0gVGhlIGRpbWVuc2lvbiBvZiB0aGUgaW1hZ2VcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkud2lkdGggPSBNYXRoLm1heChcclxuICAgICAgICAgICAgICAgICAgICBHYWxsZXJ5LmNvbmZpZy5taW5XaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihNYXRoLm1heChHYWxsZXJ5LndpZHRoLCBHYWxsZXJ5LmRvbS5pbWcud2lkdGgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAtIEdhbGxlcnkuY29uZmlnLmhvcml6b250YWxQYWRkaW5nKSk7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmhlaWdodCA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgICAgICAgICAgIEdhbGxlcnkuY29uZmlnLm1pbkhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihNYXRoLm1heChHYWxsZXJ5LmhlaWdodCwgR2FsbGVyeS5kb20uaW1nLmhlaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAtIEdhbGxlcnkuY29uZmlnLnZlcnRpY2FsUGFkZGluZykpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRvcCBsZWZ0IG9mIGlubmVyIGluaXRpYWxseSBpcyBhdCB0aGUgbWlkZGxlIG9mIHRoZSBzY3JlZW4gZHVlIHRvXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgQ1NTIGhhY2suIFB1dCBhIG5lZ2F0aXZlIHBvc2l0aW9uIHRvIG1ha2UgaXQgYXQgdGhlIHJpZ2h0IHNwb3RcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmlubmVyLnN0eWxlLmxlZnQgPSAoLUdhbGxlcnkud2lkdGggLyAyKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS50b3AgPSAoLUdhbGxlcnkuaGVpZ2h0IC8gMikgKyAncHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjYW5GdWxsU2NyZWVuKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHRoZSBmdWxsIHNjcmVlbiBpY29uXHJcbiAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5kb20uZnVsbHNjcmVlbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS53aWR0aCA9IEdhbGxlcnkud2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS5oZWlnaHQgPSBHYWxsZXJ5LmhlaWdodCArICdweCc7XHJcblxyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBpbWFnZSBkaW1lbnNpb25zIGdpdmVuIHRoZSBnYWxsZXJ5IHNpemVcclxuICAgICAgICAgICAgdmFyIHJhdGlvID0gR2FsbGVyeS5kb20uaW1nLndpZHRoIC8gR2FsbGVyeS5kb20uaW1nLmhlaWdodDtcclxuICAgICAgICAgICAgdmFyIHdpZHRoLCBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoR2FsbGVyeS53aWR0aCA8IEdhbGxlcnkuZG9tLmltZy53aWR0aCB8fCBHYWxsZXJ5LmhlaWdodCA8IEdhbGxlcnkuZG9tLmltZy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBnYWxsZXJ5IGlzIHNtYWxsZXIgdGhhbiB0aGUgaW1hZ2UuXHJcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZml0IHRoZSBpbWFnZSBpbiB0aGUgd2lkdGggYW5kIHNlZSB3aGF0IHRoZSBoZWlnaHQgaXNcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gR2FsbGVyeS53aWR0aDtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IEdhbGxlcnkud2lkdGggLyByYXRpbztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID4gR2FsbGVyeS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaGVpZ2h0IGRvZXNuJ3QgZml0LCB0aGVuIHdlIHNob3VsZCByZXNpemUgZm9yIGhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gR2FsbGVyeS5oZWlnaHQgKiByYXRpbztcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBHYWxsZXJ5LmhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSBnYWxsZXJ5IGlzIGxhcmdlIGVub3VnaCB0byBob2xkIHRoZSBpbWFnZSwgZ29vZCFcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gR2FsbGVyeS5kb20uaW1nLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gR2FsbGVyeS5kb20uaW1nLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBpbWFnZSBpcyB0aGUgY2VudGVyIG9mIHRoZSBnYWxsZXJ5XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltYWdlLnN0eWxlLmxlZnQgPSAoR2FsbGVyeS53aWR0aCAvIDIgLSB3aWR0aCAvIDIpICsgJ3B4JztcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1hZ2Uuc3R5bGUudG9wID0gKEdhbGxlcnkuaGVpZ2h0IC8gMiAtIGhlaWdodCAvIDIpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaGVpZ2h0IG9mIHRoZSBvdmVybGF5XHJcbiAgICAgICAgICAgIC8vIEdhbGxlcnkuZG9tLm92ZXJsYXkuc3R5bGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20ub3ZlcmxheS5zdHlsZS5oZWlnaHQgPSAnMTAwdmgnO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIGdhbGxlcnlcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20ub3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vdXRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIG1pbmltYWwgd2lkdGgvaGVpZ2h0IHRoZSBnYWxsZXJ5IGNhbiB0YWtlXHJcbiAgICAgICAgICAgIEdhbGxlcnkud2lkdGggPSAwO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBDbGVhbiB1cFxyXG4gICAgICAgICAgICBjYW5jZWxGdWxsU2NyZWVuKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSAnXyc7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltZy5zcmMgPSAnJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIC8vIEJ1YmJsZSB1cCB1bnRpbCB3ZSBmaW5kIHRoZSA8YT4gdGhhdCB0cmlnZ2VyZWQgdGhlIGV2ZW50XHJcbiAgICAgICAgICAgIHZhciBsaW5rID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB3aGlsZSAobGluay5ub2RlTmFtZSAhPT0gJ0EnKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5rID0gbGluay5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBCdWJibGUgdXAgdW50aWwgd2UgZmluZCB0aGUgZW5jbG9zaW5nIGdhbGxlcnlcclxuICAgICAgICAgICAgdmFyIGdhbGxlcnkgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgd2hpbGUgKGdhbGxlcnkuY2xhc3NOYW1lLmluZGV4T2YoJ2dhbGxlcnknKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGdhbGxlcnkgPSBnYWxsZXJ5LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNldCB1cCBzdGF0ZVxyXG4gICAgICAgICAgICBHYWxsZXJ5LmlkID0gZ2FsbGVyeS5pZC5yZXBsYWNlKC9eZ2FsbGVyeS0vLCAnJyk7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuaW1hZ2VzID0gZ2FsbGVyeS5xdWVyeVNlbGVjdG9yQWxsKCdhJyk7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuY3VycmVudCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoR2FsbGVyeS5pbWFnZXMsIGxpbmspO1xyXG5cclxuICAgICAgICAgICAgR2FsbGVyeS5pbml0RG9tKCk7XHJcbiAgICAgICAgICAgIEdhbGxlcnkudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBEaXNwbGF5IHRoZSBnYWxsZXJ5XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm91dGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3dFdmVudDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgbGVmdCBjbGlja1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBHYWxsZXJ5LnNob3coZXZlbnQudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFB1dCBpdCBhdCB0aGUgZW5kIHNvIHRoYXQgaXQgXCJncmFjZWZ1bGx5XCIgZGVncmFkZSBpZiB0aGUgYnJvd3NlciBzdWNrc1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG91Y2hzdGFydDogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgIEdhbGxlcnkudG91Y2hTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgIEdhbGxlcnkudG91Y2hTdGFydFggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgICAgICBHYWxsZXJ5LnRvdWNoU3RhcnRZID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xyXG4gICAgICAgICAgR2FsbGVyeS5sYXN0VG91Y2hYID0gR2FsbGVyeS50b3VjaFN0YXJ0WDtcclxuICAgICAgICAgIEdhbGxlcnkubGFzdFRvdWNoWSA9IEdhbGxlcnkudG91Y2hTdGFydFk7XHJcbiAgICAgICAgICBHYWxsZXJ5LmlzVG91Y2hpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgR2FsbGVyeS5oYXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICBcclxuICAgICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5Lnpvb21pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LnN0YXJ0RGlzdGFuY2UgPSBHYWxsZXJ5LmdldERpc3RhbmNlKGV2ZW50LnRvdWNoZXNbMF0sIGV2ZW50LnRvdWNoZXNbMV0pO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LnN0YXJ0U2NhbGUgPSBHYWxsZXJ5LmN1cnJlbnRTY2FsZSB8fCAxO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgR2FsbGVyeS56b29taW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIEluaWNpYXIgZWwgYXJyYXN0cmUgY29udGludW9cclxuICAgICAgICAgICAgR2FsbGVyeS5zdGFydERyYWcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICBcclxuICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICBpZiAoR2FsbGVyeS56b29taW5nICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBuZXdEaXN0YW5jZSA9IEdhbGxlcnkuZ2V0RGlzdGFuY2UoZXZlbnQudG91Y2hlc1swXSwgZXZlbnQudG91Y2hlc1sxXSk7XHJcbiAgICAgICAgICAgIHZhciBzY2FsZSA9IChuZXdEaXN0YW5jZSAvIEdhbGxlcnkuc3RhcnREaXN0YW5jZSkgKiBHYWxsZXJ5LnN0YXJ0U2NhbGU7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuc2V0SW1hZ2VTY2FsZShzY2FsZSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3VjaE1vdmVYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgICAgICAgICB2YXIgdG91Y2hNb3ZlWSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIEdhbGxlcnkubGFzdFRvdWNoWCA9IHRvdWNoTW92ZVg7XHJcbiAgICAgICAgICAgIEdhbGxlcnkubGFzdFRvdWNoWSA9IHRvdWNoTW92ZVk7XHJcbiAgICAgIFxyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModG91Y2hNb3ZlWCAtIEdhbGxlcnkudG91Y2hTdGFydFgpID4gMTAgfHwgTWF0aC5hYnModG91Y2hNb3ZlWSAtIEdhbGxlcnkudG91Y2hTdGFydFkpID4gMTApIHtcclxuICAgICAgICAgICAgICBHYWxsZXJ5Lmhhc01vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgIFxyXG4gICAgICAgIHRvdWNoZW5kOiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgdmFyIHRvdWNoRW5kVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgdmFyIHRvdWNoVGltZSA9IHRvdWNoRW5kVGltZSAtIEdhbGxlcnkudG91Y2hTdGFydFRpbWU7XHJcbiAgICAgIFxyXG4gICAgICAgICAgaWYgKEdhbGxlcnkuem9vbWluZykge1xyXG4gICAgICAgICAgICBHYWxsZXJ5Lnpvb21pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgR2FsbGVyeS5jdXJyZW50U2NhbGUgPSBHYWxsZXJ5LmdldEltYWdlU2NhbGUoKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoIUdhbGxlcnkuaGFzTW92ZWQgJiYgdG91Y2hUaW1lIDwgMzAwKSB7XHJcbiAgICAgICAgICAgIC8vIHZhciB0b3VjaEVuZFggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgICAgICAgICAvLyBpZiAodG91Y2hFbmRYIDwgR2FsbGVyeS53aWR0aCAqIEdhbGxlcnkuY29uZmlnLmxlZnRBcmVhKSB7XHJcbiAgICAgICAgICAgIC8vICAgR2FsbGVyeS5jaGFuZ2UoLTEpO1xyXG4gICAgICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyAgIEdhbGxlcnkuY2hhbmdlKCsxKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICAgIEdhbGxlcnkuaXNUb3VjaGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgR2FsbGVyeS5oYXNNb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgR2FsbGVyeS5zdG9wRHJhZygpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIFxyXG4gICAgICAgIHN0YXJ0RHJhZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoIUdhbGxlcnkuZHJhZ0ludGVydmFsKSB7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZHJhZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgaWYgKEdhbGxlcnkuaXNUb3VjaGluZyAmJiBHYWxsZXJ5LmN1cnJlbnRTY2FsZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWx0YVggPSBHYWxsZXJ5Lmxhc3RUb3VjaFggLSBHYWxsZXJ5LnRvdWNoU3RhcnRYO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhWSA9IEdhbGxlcnkubGFzdFRvdWNoWSAtIEdhbGxlcnkudG91Y2hTdGFydFk7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LnBhbkltYWdlKGRlbHRhWCwgZGVsdGFZKTtcclxuICAgICAgICAgICAgICAgIEdhbGxlcnkudG91Y2hTdGFydFggPSBHYWxsZXJ5Lmxhc3RUb3VjaFg7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LnRvdWNoU3RhcnRZID0gR2FsbGVyeS5sYXN0VG91Y2hZO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMTYpOyAvLyBBcHJveGltYWRhbWVudGUgNjAgRlBTXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgICAgc3RvcERyYWc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKEdhbGxlcnkuZHJhZ0ludGVydmFsKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoR2FsbGVyeS5kcmFnSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRyYWdJbnRlcnZhbCA9IG51bGw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgICAgcGFuSW1hZ2U6IGZ1bmN0aW9uKGRlbHRhWCwgZGVsdGFZKSB7XHJcbiAgICAgICAgICB2YXIgaW1nID0gR2FsbGVyeS5kb20uaW1hZ2U7XHJcbiAgICAgICAgICB2YXIgcmVjdCA9IGltZy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gR2FsbGVyeS5kb20uc2NyZWVuLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBcclxuICAgICAgICAgIC8vIE9idGVuZXIgbGEgdHJhc2xhY2nDs24gYWN0dWFsXHJcbiAgICAgICAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IGltZy5zdHlsZS50cmFuc2Zvcm0gfHwgJyc7XHJcbiAgICAgICAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGN1cnJlbnRUcmFuc2Zvcm0ubWF0Y2goL3RyYW5zbGF0ZVxcKCguKj8pXFwpLykgfHwgWycnLCAnMHB4LCAwcHgnXTtcclxuICAgICAgICAgIHZhciBbY3VycmVudFgsIGN1cnJlbnRZXSA9IGN1cnJlbnRUcmFuc2xhdGVbMV0uc3BsaXQoJywnKS5tYXAodmFsID0+IHBhcnNlRmxvYXQodmFsKSB8fCAwKTtcclxuICAgICAgXHJcbiAgICAgICAgICAvLyBDYWxjdWxhciBsYSBudWV2YSBwb3NpY2nDs25cclxuICAgICAgICAgIHZhciBuZXdYID0gY3VycmVudFggKyBkZWx0YVg7XHJcbiAgICAgICAgICB2YXIgbmV3WSA9IGN1cnJlbnRZICsgZGVsdGFZO1xyXG4gICAgICBcclxuICAgICAgICAgIC8vIENhbGN1bGFyIGxvcyBsw61taXRlcyBkZSBtb3ZpbWllbnRvXHJcbiAgICAgICAgICB2YXIgbWF4WCA9IE1hdGgubWF4KDAsIChyZWN0LndpZHRoIC0gY29udGFpbmVyUmVjdC53aWR0aCkgLyAyKTtcclxuICAgICAgICAgIHZhciBtYXhZID0gTWF0aC5tYXgoMCwgKHJlY3QuaGVpZ2h0IC0gY29udGFpbmVyUmVjdC5oZWlnaHQpIC8gMik7XHJcbiAgICAgIFxyXG4gICAgICAgICAgLy8gTGltaXRhciBlbCBtb3ZpbWllbnRvXHJcbiAgICAgICAgICBuZXdYID0gTWF0aC5tYXgoLW1heFgsIE1hdGgubWluKG5ld1gsIG1heFgpKTtcclxuICAgICAgICAgIG5ld1kgPSBNYXRoLm1heCgtbWF4WSwgTWF0aC5taW4obmV3WSwgbWF4WSkpO1xyXG4gICAgICBcclxuICAgICAgICAgIC8vIEFwbGljYXIgbGEgbnVldmEgdHJhbnNmb3JtYWNpw7NuXHJcbiAgICAgICAgICBpbWcuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke25ld1h9cHgsICR7bmV3WX1weCkgc2NhbGUoJHtHYWxsZXJ5LmN1cnJlbnRTY2FsZX0pYDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRJbWFnZVNjYWxlOiBmdW5jdGlvbiAoc2NhbGUpIHtcclxuICAgICAgICAgICAgLy8gc2NhbGUgPSBNYXRoLm1heCgxLCBNYXRoLm1pbihzY2FsZSwgNSkpOyAvLyBMaW1pdGEgZWwgem9vbSBlbnRyZSAxeCB5IDN4XHJcbiAgICAgICAgICAgIEdhbGxlcnkuY3VycmVudFNjYWxlID0gc2NhbGU7XHJcbiAgICAgICAgICAgIHZhciBpbWcgPSBHYWxsZXJ5LmRvbS5pbWFnZTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBpbWcuc3R5bGUudHJhbnNmb3JtIHx8ICcnO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGN1cnJlbnRUcmFuc2Zvcm0ubWF0Y2goL3RyYW5zbGF0ZVxcKCguKj8pXFwpLykgfHwgWyd0cmFuc2xhdGUoMHB4LCAwcHgpJ107XHJcblxyXG4gICAgICAgICAgICBpbWcuc3R5bGUudHJhbnNmb3JtID0gYCR7Y3VycmVudFRyYW5zbGF0ZVswXX0gc2NhbGUoJHtzY2FsZX0pYDtcclxuXHJcbiAgICAgICAgICAgIEdhbGxlcnkudXBkYXRlWm9vbUJ1dHRvbnMoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwZGF0ZVpvb21CdXR0b25zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChHYWxsZXJ5LmN1cnJlbnRTY2FsZSA8PSAxKSB7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21PdXQuc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS56b29tT3V0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21PdXQuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uem9vbU91dC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICAgIGlmIChHYWxsZXJ5LmN1cnJlbnRTY2FsZSA+PSAxMCkge1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS56b29tSW4uc3R5bGUub3BhY2l0eSA9ICcwLjUnO1xyXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS56b29tSW4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgR2FsbGVyeS5kb20uem9vbUluLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnpvb21Jbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGRlbHRhKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXh0SW5kZXggPSBtb2QoR2FsbGVyeS5jdXJyZW50ICsgZGVsdGEsIEdhbGxlcnkuaW1hZ2VzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0SW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgIG5leHRJbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgR2FsbGVyeS5jdXJyZW50ID0gbmV4dEluZGV4O1xyXG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1hZ2Uuc3JjID0gbmV4dEltZy5zcmM7XHJcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBuZXh0SW1nLnNyYyA9IEdhbGxlcnkuaW1hZ2VzW25leHRJbmRleF0uaHJlZjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXREaXN0YW5jZTogZnVuY3Rpb24gKHRvdWNoMSwgdG91Y2gyKSB7XHJcbiAgICAgICAgICAgIHZhciBkeCA9IHRvdWNoMS5jbGllbnRYIC0gdG91Y2gyLmNsaWVudFg7XHJcbiAgICAgICAgICAgIHZhciBkeSA9IHRvdWNoMS5jbGllbnRZIC0gdG91Y2gyLmNsaWVudFk7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBHYWxsZXJ5LmluaXQpO1xyXG5cclxuXHJcbiAgICAvLyBVdGlsaXRpZXNcclxuXHJcbiAgICAvLyBGdWxsIFNjcmVlblxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbkZ1bGxTY3JlZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4gfHxcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZXF1ZXN0RnVsbFNjcmVlbiB8fFxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5Lm1velJlcXVlc3RGdWxsU2NyZWVuO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzRnVsbFNjcmVlbigpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZnVsbFNjcmVlbkVsZW1lbnQgfHxcclxuICAgICAgICAgICAgZG9jdW1lbnQubW96RnVsbFNjcmVlbiB8fFxyXG4gICAgICAgICAgICBkb2N1bWVudC53ZWJraXRJc0Z1bGxTY3JlZW47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ29GdWxsU2NyZWVuKGVsZW0pIHtcclxuICAgICAgICBpZiAoZWxlbS5yZXF1ZXN0RnVsbFNjcmVlbikge1xyXG4gICAgICAgICAgICBlbGVtLnJlcXVlc3RGdWxsU2NyZWVuKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtLm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgIGVsZW0ubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW0ud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgZWxlbS53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjYW5jZWxGdWxsU2NyZWVuKCkge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmNhbmNlbEZ1bGxTY3JlZW4oKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbikge1xyXG4gICAgICAgICAgICBkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBTbWFsbCBET00gY29uc3RydWN0b3JcclxuXHJcbiAgICBmdW5jdGlvbiBlKG5hbWUsIGNsYXNzTmFtZSwgcGFyZW50KSB7XHJcbiAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xyXG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtKTtcclxuICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNb2R1bG8gdGhhdCB3b3JrcyB3aXRoIG5lZ2F0aXZlIG51bWJlcnNcclxuXHJcbiAgICBmdW5jdGlvbiBtb2QoYSwgYikge1xyXG4gICAgICAgIHJldHVybiAoKGEgJSBiKSArIGIpICUgYjtcclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLENBQUMsWUFBWTtFQUVUQSxPQUFPLEdBQUFDLGVBQUEsQ0FBQUEsZUFBQTtJQUNIQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ1BDLEtBQUssRUFBRSxDQUFDO0lBQ1JDLE1BQU0sRUFBRSxDQUFDO0lBQ1Q7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBQyxNQUFNLEVBQUU7TUFDSkMsUUFBUSxFQUFFLEdBQUc7TUFDYkMsU0FBUyxFQUFFLEdBQUc7TUFDZEMsaUJBQWlCLEVBQUUsRUFBRTtNQUFFO01BQ3ZCQyxlQUFlLEVBQUUsRUFBRTtNQUFFO01BQ3JCQyxRQUFRLEVBQUUsR0FBRztNQUFFO01BQ2ZDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVEQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFjO01BQ2pCWixPQUFPLENBQUNFLEdBQUcsQ0FBQ1csT0FBTyxHQUFHQyxDQUFDLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFQyxRQUFRLENBQUNDLElBQUksQ0FBQztNQUNoRWhCLE9BQU8sQ0FB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W119\n//# sourceURL=webpack-internal:///./resources/js/gallery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/gallery.js"]();
/******/ 	
/******/ })()
;