/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/gallery.js":
/*!*********************************!*\
  !*** ./resources/js/gallery.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n(function () {\n  Gallery = _defineProperty(_defineProperty({\n    dom: {},\n    width: 0,\n    height: 0,\n    // config: {\n    //     minWidth: 300,\n    //     minHeight: 300,\n    //     horizontalPadding: 80,\n    //     verticalPadding: 80,\n    //     leftArea: 0.20,\n    //     prefecth: 5\n    // },\n    config: {\n      minWidth: 300,\n      minHeight: 300,\n      horizontalPadding: 20,\n      // Reducido para móviles\n      verticalPadding: 20,\n      // Reducido para móviles\n      leftArea: 0.3,\n      // Aumentado para facilitar el toque\n      prefetch: 3 // Reducido para ahorrar datos en móviles\n    },\n    initDom: function initDom() {\n      Gallery.dom.overlay = e('div', 'gallery-overlay', document.body);\n      Gallery.dom.overlay.addEventListener('click', Gallery.close);\n      Gallery.dom.outer = e('div', 'gallery-outer', document.body);\n      Gallery.dom.inner = e('div', 'gallery-inner', Gallery.dom.outer);\n      Gallery.dom.screen = e('div', 'gallery-screen', Gallery.dom.inner);\n      Gallery.dom.screen.addEventListener('mousemove', Gallery.mousemove);\n      Gallery.dom.screen.addEventListener('click', Gallery.click);\n      Gallery.dom.left = e('div', 'gallery-left', Gallery.dom.screen);\n      Gallery.dom.right = e('div', 'gallery-right', Gallery.dom.screen);\n      Gallery.dom.image = e('img', 'gallery-image', Gallery.dom.screen);\n      Gallery.dom.fullscreen = e('div', 'gallery-fullscreen', Gallery.dom.screen);\n      Gallery.dom.fullscreen.addEventListener('click', Gallery.fullscreen);\n      if (!canFullScreen()) {\n        Gallery.dom.fullscreen.style.display = 'none';\n      }\n      Gallery.dom.bottombar = e('div', 'gallery-bottombar', Gallery.dom.screen);\n      Gallery.dom.count = e('span', 'gallery-count', Gallery.dom.bottombar);\n      Gallery.dom.close = e('a', 'gallery-close', Gallery.dom.bottombar);\n      Gallery.dom.close.innerHTML = 'Close';\n      Gallery.dom.close.href = 'javascript:;';\n      Gallery.dom.close.addEventListener('click', Gallery.close);\n      Gallery.dom.original = e('a', 'gallery-original', Gallery.dom.bottombar);\n      Gallery.dom.original.target = '_blank';\n      Gallery.dom.original.innerHTML = 'Original';\n      Gallery.dom.img = document.createElement('img');\n      Gallery.dom.img.onload = function () {\n        Gallery.dom.image.src = Gallery.images[Gallery.current].href;\n        Gallery.dom.image.style.display = 'block';\n        Gallery.resize();\n      };\n      Gallery.dom.screen.addEventListener('touchstart', Gallery.touchstart, {\n        passive: false\n      });\n      Gallery.dom.screen.addEventListener('touchmove', Gallery.touchmove, {\n        passive: false\n      });\n      Gallery.dom.screen.addEventListener('touchend', Gallery.touchend);\n      window.addEventListener('orientationchange', Gallery.resize);\n      window.addEventListener('resize', Gallery.resize);\n      window.addEventListener('keydown', function (event) {\n        if (Gallery.dom.overlay.style.display !== 'block') {\n          // Don't do anything when the gallery isn't displayed\n          return;\n        }\n\n        // Right\n        if (event.keyCode === 39) {\n          Gallery.change(+1);\n        }\n\n        // Left\n        if (event.keyCode === 37) {\n          Gallery.change(-1);\n        }\n\n        // Escape\n        if (event.keyCode === 27) {\n          Gallery.close();\n        }\n      });\n\n      // Do not initialize the DOM more than once\n      Gallery.initDom = function () {};\n    },\n    init: function init() {\n      var links = document.querySelectorAll('.gallery[id] a');\n      Array.prototype.forEach.call(links, function (elem) {\n        elem.removeEventListener('click', Gallery.showEvent);\n        elem.addEventListener('click', Gallery.showEvent);\n      });\n\n      // Retrieve #image=name:pos in the URL\n      var start = document.location.hash.indexOf('image=');\n      if (start !== -1) {\n        var hash = document.location.hash;\n        var parts = hash.substr(start + 'image='.length).split(':');\n        var gallery = document.getElementById('gallery-' + parts[0]);\n        if (gallery) {\n          var link = gallery.querySelectorAll('a')[parts[1] - 1];\n          if (link) {\n            // If we found the gallery and image, then show the gallery\n            Gallery.show(link);\n          }\n        }\n      }\n    },\n    getOffsetX: function getOffsetX(event) {\n      var offsetX = event.offsetX;\n      if (event.offsetX === undefined) {\n        // Using deprecated attributes on Firefox\n        offsetX = event.layerX;\n      }\n      var target = event.target;\n      while (target !== Gallery.dom.screen) {\n        offsetX += target.offsetLeft;\n        target = target.parentElement;\n      }\n      return offsetX;\n    },\n    isBottomBar: function isBottomBar(event) {\n      var target = event.target;\n      while (target !== Gallery.dom.screen) {\n        if (target === Gallery.dom.bottombar) {\n          return true;\n        }\n        target = target.parentElement;\n      }\n      return false;\n    },\n    mousemove: function mousemove(event) {\n      // Highlight the Left or Right arrow\n      if (Gallery.isBottomBar(event) || event.target === Gallery.dom.fullscreen) {\n        Gallery.dom.left.className = 'gallery-left';\n        Gallery.dom.right.className = 'gallery-right';\n      } else if (Gallery.getOffsetX(event) < Gallery.width * Gallery.config.leftArea) {\n        Gallery.dom.left.className = 'gallery-left gallery-active';\n        Gallery.dom.right.className = 'gallery-right';\n      } else {\n        Gallery.dom.left.className = 'gallery-left';\n        Gallery.dom.right.className = 'gallery-right gallery-active';\n      }\n    },\n    click: function click(event) {\n      if (Gallery.isBottomBar(event)) {\n        return;\n      } else if (Gallery.getOffsetX(event) < Gallery.width * Gallery.config.leftArea) {\n        Gallery.change(-1);\n      } else {\n        Gallery.change(+1);\n      }\n    },\n    change: function change(delta) {\n      Gallery.current = mod(Gallery.current + delta, Gallery.images.length);\n      Gallery.update();\n    },\n    update: function update() {\n      Gallery.dom.count.innerHTML = Gallery.current + 1 + ' of ' + Gallery.images.length;\n      Gallery.dom.img.src = Gallery.images[Gallery.current].href;\n      Gallery.dom.original.href = Gallery.images[Gallery.current].href;\n      document.location.hash = 'image=' + Gallery.id + ':' + (Gallery.current + 1);\n      Gallery.dom.image.style.display = 'none';\n      Gallery.resize();\n      Gallery.dom.image.style.transform = 'translate(0px, 0px) scale(1)';\n      Gallery.currentScale = 1;\n\n      // Prefetch the next N image\n      for (var i = 0; i < Gallery.config.prefecth; ++i) {\n        var next = mod(Gallery.current + i + 1, Gallery.images.length);\n        new Image().src = Gallery.images[next];\n      }\n    },\n    fullscreen: function fullscreen(event) {\n      goFullScreen(Gallery.dom.inner);\n      event.stopPropagation();\n    },\n    resize: function resize() {\n      if (isFullScreen()) {\n        // Make the gallery at the top left and full width/height\n        Gallery.dom.inner.style.left = '0';\n        Gallery.dom.inner.style.top = '0';\n        Gallery.width = window.innerWidth;\n        Gallery.height = window.innerHeight;\n\n        // Hide the full screen icon\n        Gallery.dom.fullscreen.style.display = 'none';\n      } else {\n        // The dimension must be (in order of priority)\n        // - At least the minimum dimensions\n        // - Keep a padding on the window\n        // - Equal or larger than the previous dimensions\n        // - The dimension of the image\n        Gallery.width = Math.max(Gallery.config.minWidth, Math.min(Math.max(Gallery.width, Gallery.dom.img.width), window.innerWidth - Gallery.config.horizontalPadding));\n        Gallery.height = Math.max(Gallery.config.minHeight, Math.min(Math.max(Gallery.height, Gallery.dom.img.height), window.innerHeight - Gallery.config.verticalPadding));\n\n        // Top left of inner initially is at the middle of the screen due to\n        // the CSS hack. Put a negative position to make it at the right spot\n        Gallery.dom.inner.style.left = -Gallery.width / 2 + 'px';\n        Gallery.dom.inner.style.top = -Gallery.height / 2 + 'px';\n        if (canFullScreen()) {\n          // Show the full screen icon\n          Gallery.dom.fullscreen.style.display = 'block';\n        }\n      }\n      Gallery.dom.inner.style.width = Gallery.width + 'px';\n      Gallery.dom.inner.style.height = Gallery.height + 'px';\n\n      // Find the image dimensions given the gallery size\n      var ratio = Gallery.dom.img.width / Gallery.dom.img.height;\n      var width, height;\n      if (Gallery.width < Gallery.dom.img.width || Gallery.height < Gallery.dom.img.height) {\n        // If the gallery is smaller than the image.\n        // Try to fit the image in the width and see what the height is\n        width = Gallery.width;\n        height = Gallery.width / ratio;\n        if (height > Gallery.height) {\n          // If the height doesn't fit, then we should resize for height\n          width = Gallery.height * ratio;\n          height = Gallery.height;\n        }\n      } else {\n        // The gallery is large enough to hold the image, good!\n        width = Gallery.dom.img.width;\n        height = Gallery.dom.img.height;\n      }\n      Gallery.dom.image.width = width;\n      Gallery.dom.image.height = height;\n\n      // Move the image is the center of the gallery\n      Gallery.dom.image.style.left = Gallery.width / 2 - width / 2 + 'px';\n      Gallery.dom.image.style.top = Gallery.height / 2 - height / 2 + 'px';\n\n      // Update the height of the overlay\n      // Gallery.dom.overlay.style.height = window.innerHeight + 'px';\n      Gallery.dom.overlay.style.height = '100vh';\n    },\n    close: function close() {\n      // Hide the gallery\n      Gallery.dom.overlay.style.display = 'none';\n      Gallery.dom.outer.style.display = 'none';\n\n      // Reset the minimal width/height the gallery can take\n      Gallery.width = 0;\n      Gallery.height = 0;\n\n      // Clean up\n      cancelFullScreen();\n      document.location.hash = '_';\n      Gallery.dom.img.src = '';\n    },\n    show: function show(target) {\n      // Bubble up until we find the <a> that triggered the event\n      var link = target;\n      while (link.nodeName !== 'A') {\n        link = link.parentElement;\n      }\n\n      // Bubble up until we find the enclosing gallery\n      var gallery = target.parentElement;\n      while (gallery.className.indexOf('gallery') === -1) {\n        gallery = gallery.parentElement;\n      }\n\n      // Set up state\n      Gallery.id = gallery.id.replace(/^gallery-/, '');\n      Gallery.images = gallery.querySelectorAll('a');\n      Gallery.current = Array.prototype.indexOf.call(Gallery.images, link);\n      Gallery.initDom();\n      Gallery.update();\n\n      // Display the gallery\n      Gallery.dom.overlay.style.display = 'block';\n      Gallery.dom.outer.style.display = 'block';\n    },\n    showEvent: function showEvent(event) {\n      // Only left click\n      if (event.button !== 0 || event.ctrlKey || event.metaKey) {\n        return;\n      }\n      Gallery.show(event.target);\n\n      // Put it at the end so that it \"gracefully\" degrade if the browser sucks\n      event.preventDefault();\n    },\n    touchstart: function touchstart(event) {\n      Gallery.touchStartTime = new Date().getTime();\n      Gallery.touchStartX = event.touches[0].clientX;\n      Gallery.touchStartY = event.touches[0].clientY;\n      Gallery.lastTouchX = Gallery.touchStartX;\n      Gallery.lastTouchY = Gallery.touchStartY;\n      Gallery.isTouching = true;\n      Gallery.hasMoved = false;\n      if (event.touches.length === 2) {\n        event.preventDefault();\n        Gallery.zooming = true;\n        Gallery.startDistance = Gallery.getDistance(event.touches[0], event.touches[1]);\n        Gallery.startScale = Gallery.currentScale || 1;\n      } else {\n        Gallery.zooming = false;\n      }\n    },\n    touchmove: function touchmove(event) {\n      if (Gallery.zooming && event.touches.length === 2) {\n        event.preventDefault();\n        var newDistance = Gallery.getDistance(event.touches[0], event.touches[1]);\n        var scale = newDistance / Gallery.startDistance * Gallery.startScale;\n        Gallery.setImageScale(scale);\n      } else if (event.touches.length === 1) {\n        var touchMoveX = event.touches[0].clientX;\n        var touchMoveY = event.touches[0].clientY;\n        var deltaX = touchMoveX - Gallery.lastTouchX;\n        var deltaY = touchMoveY - Gallery.lastTouchY;\n        if (Math.abs(touchMoveX - Gallery.touchStartX) > 10 || Math.abs(touchMoveY - Gallery.touchStartY) > 10) {\n          Gallery.hasMoved = true;\n        }\n        if (Gallery.currentScale > 1) {\n          event.preventDefault();\n          Gallery.panImage(deltaX, deltaY);\n        }\n        Gallery.lastTouchX = touchMoveX;\n        Gallery.lastTouchY = touchMoveY;\n      }\n    },\n    touchend: function touchend(event) {\n      var touchEndTime = new Date().getTime();\n      var touchTime = touchEndTime - Gallery.touchStartTime;\n      if (Gallery.zooming) {\n        Gallery.zooming = false;\n        Gallery.currentScale = Gallery.getImageScale();\n      }\n      // } else if (!Gallery.hasMoved && touchTime < 300) {\n      //   var touchEndX = event.changedTouches[0].clientX;\n      //   if (touchEndX < Gallery.width * Gallery.config.leftArea) {\n      //     Gallery.change(-1);\n      //   } else {\n      //     Gallery.change(+1);\n      //   }\n      // }\n\n      Gallery.isTouching = false;\n      Gallery.hasMoved = false;\n    },\n    panImage: function panImage(deltaX, deltaY) {\n      var img = Gallery.dom.image;\n      var rect = img.getBoundingClientRect();\n      var containerRect = Gallery.dom.screen.getBoundingClientRect();\n\n      // Obtener la traslación actual\n      var currentTransform = img.style.transform || '';\n      var currentTranslate = currentTransform.match(/translate\\((.*?)\\)/) || ['', '0px, 0px'];\n      var _currentTranslate$1$s = currentTranslate[1].split(',').map(function (val) {\n          return parseFloat(val) || 0;\n        }),\n        _currentTranslate$1$s2 = _slicedToArray(_currentTranslate$1$s, 2),\n        currentX = _currentTranslate$1$s2[0],\n        currentY = _currentTranslate$1$s2[1];\n\n      // Calcular la nueva posición\n      var newX = currentX + deltaX;\n      var newY = currentY + deltaY;\n\n      // Calcular los límites de movimiento\n      var scaledWidth = rect.width / Gallery.currentScale;\n      var scaledHeight = rect.height / Gallery.currentScale;\n      var maxX = Math.max(0, (scaledWidth - containerRect.width) / 2);\n      var maxY = Math.max(0, (scaledHeight - containerRect.height) / 2);\n\n      // Limitar el movimiento\n      newX = Math.max(-maxX, Math.min(newX, maxX));\n      newY = Math.max(-maxY, Math.min(newY, maxY));\n\n      // Aplicar la nueva transformación\n      img.style.transform = \"translate(\".concat(newX, \"px, \").concat(newY, \"px) scale(\").concat(Gallery.currentScale, \")\");\n    },\n    setImageScale: function setImageScale(scale) {\n      scale = Math.max(1, Math.min(scale, 3)); // Limita el zoom entre 1x y 3x\n      Gallery.currentScale = scale;\n      var img = Gallery.dom.image;\n      var currentTransform = img.style.transform || '';\n      var currentTranslate = currentTransform.match(/translate\\((.*?)\\)/) || ['translate(0px, 0px)'];\n      img.style.transform = \"\".concat(currentTranslate[0], \" scale(\").concat(scale, \")\");\n    },\n    getImageScale: function getImageScale() {\n      var transform = Gallery.dom.image.style.transform;\n      var scaleMatch = transform.match(/scale\\((.*?)\\)/);\n      return scaleMatch ? parseFloat(scaleMatch[1]) : 1;\n    }\n  }, \"change\", function change(delta) {\n    var nextIndex = mod(Gallery.current + delta, Gallery.images.length);\n    var nextImg = new Image();\n    nextImg.onload = function () {\n      Gallery.current = nextIndex;\n      Gallery.dom.image.src = nextImg.src;\n      Gallery.update();\n    };\n    nextImg.src = Gallery.images[nextIndex].href;\n  }), \"getDistance\", function getDistance(touch1, touch2) {\n    var dx = touch1.clientX - touch2.clientX;\n    var dy = touch1.clientY - touch2.clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n  });\n  document.addEventListener('DOMContentLoaded', Gallery.init);\n\n  // Utilities\n\n  // Full Screen\n\n  function canFullScreen() {\n    return document.body.webkitRequestFullScreen || document.body.requestFullScreen || document.body.mozRequestFullScreen;\n  }\n  function isFullScreen() {\n    return document.fullScreenElement || document.mozFullScreen || document.webkitIsFullScreen;\n  }\n  function goFullScreen(elem) {\n    if (elem.requestFullScreen) {\n      elem.requestFullScreen();\n    } else if (elem.mozRequestFullScreen) {\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullScreen) {\n      elem.webkitRequestFullScreen();\n    }\n  }\n  function cancelFullScreen() {\n    if (document.cancelFullScreen) {\n      document.cancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    }\n  }\n\n  // Small DOM constructor\n\n  function e(name, className, parent) {\n    var elem = document.createElement(name);\n    parent.appendChild(elem);\n    if (className) {\n      elem.className = className;\n    }\n    return elem;\n  }\n\n  // Modulo that works with negative numbers\n\n  function mod(a, b) {\n    return (a % b + b) % b;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZ2FsbGVyeS5qcyIsIm5hbWVzIjpbIkdhbGxlcnkiLCJfZGVmaW5lUHJvcGVydHkiLCJkb20iLCJ3aWR0aCIsImhlaWdodCIsImNvbmZpZyIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwiaG9yaXpvbnRhbFBhZGRpbmciLCJ2ZXJ0aWNhbFBhZGRpbmciLCJsZWZ0QXJlYSIsInByZWZldGNoIiwiaW5pdERvbSIsIm92ZXJsYXkiLCJlIiwiZG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsb3NlIiwib3V0ZXIiLCJpbm5lciIsInNjcmVlbiIsIm1vdXNlbW92ZSIsImNsaWNrIiwibGVmdCIsInJpZ2h0IiwiaW1hZ2UiLCJmdWxsc2NyZWVuIiwiY2FuRnVsbFNjcmVlbiIsInN0eWxlIiwiZGlzcGxheSIsImJvdHRvbWJhciIsImNvdW50IiwiaW5uZXJIVE1MIiwiaHJlZiIsIm9yaWdpbmFsIiwidGFyZ2V0IiwiaW1nIiwiY3JlYXRlRWxlbWVudCIsIm9ubG9hZCIsInNyYyIsImltYWdlcyIsImN1cnJlbnQiLCJyZXNpemUiLCJ0b3VjaHN0YXJ0IiwicGFzc2l2ZSIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwid2luZG93IiwiZXZlbnQiLCJrZXlDb2RlIiwiY2hhbmdlIiwiaW5pdCIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwicHJvdG90eXBlIiwiZm9yRWFjaCIsImNhbGwiLCJlbGVtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNob3dFdmVudCIsInN0YXJ0IiwibG9jYXRpb24iLCJoYXNoIiwiaW5kZXhPZiIsInBhcnRzIiwic3Vic3RyIiwibGVuZ3RoIiwic3BsaXQiLCJnYWxsZXJ5IiwiZ2V0RWxlbWVudEJ5SWQiLCJsaW5rIiwic2hvdyIsImdldE9mZnNldFgiLCJvZmZzZXRYIiwidW5kZWZpbmVkIiwibGF5ZXJYIiwib2Zmc2V0TGVmdCIsInBhcmVudEVsZW1lbnQiLCJpc0JvdHRvbUJhciIsImNsYXNzTmFtZSIsImRlbHRhIiwibW9kIiwidXBkYXRlIiwiaWQiLCJ0cmFuc2Zvcm0iLCJjdXJyZW50U2NhbGUiLCJpIiwicHJlZmVjdGgiLCJuZXh0IiwiSW1hZ2UiLCJnb0Z1bGxTY3JlZW4iLCJzdG9wUHJvcGFnYXRpb24iLCJpc0Z1bGxTY3JlZW4iLCJ0b3AiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJNYXRoIiwibWF4IiwibWluIiwicmF0aW8iLCJjYW5jZWxGdWxsU2NyZWVuIiwibm9kZU5hbWUiLCJyZXBsYWNlIiwiYnV0dG9uIiwiY3RybEtleSIsIm1ldGFLZXkiLCJwcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoZXMiLCJjbGllbnRYIiwidG91Y2hTdGFydFkiLCJjbGllbnRZIiwibGFzdFRvdWNoWCIsImxhc3RUb3VjaFkiLCJpc1RvdWNoaW5nIiwiaGFzTW92ZWQiLCJ6b29taW5nIiwic3RhcnREaXN0YW5jZSIsImdldERpc3RhbmNlIiwic3RhcnRTY2FsZSIsIm5ld0Rpc3RhbmNlIiwic2NhbGUiLCJzZXRJbWFnZVNjYWxlIiwidG91Y2hNb3ZlWCIsInRvdWNoTW92ZVkiLCJkZWx0YVgiLCJkZWx0YVkiLCJhYnMiLCJwYW5JbWFnZSIsInRvdWNoRW5kVGltZSIsInRvdWNoVGltZSIsImdldEltYWdlU2NhbGUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY29udGFpbmVyUmVjdCIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50VHJhbnNsYXRlIiwibWF0Y2giLCJfY3VycmVudFRyYW5zbGF0ZSQxJHMiLCJtYXAiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiX2N1cnJlbnRUcmFuc2xhdGUkMSRzMiIsIl9zbGljZWRUb0FycmF5IiwiY3VycmVudFgiLCJjdXJyZW50WSIsIm5ld1giLCJuZXdZIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJtYXhYIiwibWF4WSIsImNvbmNhdCIsInNjYWxlTWF0Y2giLCJuZXh0SW5kZXgiLCJuZXh0SW1nIiwidG91Y2gxIiwidG91Y2gyIiwiZHgiLCJkeSIsInNxcnQiLCJ3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbiIsInJlcXVlc3RGdWxsU2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJmdWxsU2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW4iLCJ3ZWJraXRJc0Z1bGxTY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0Q2FuY2VsRnVsbFNjcmVlbiIsIm5hbWUiLCJwYXJlbnQiLCJhcHBlbmRDaGlsZCIsImEiLCJiIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZ2FsbGVyeS5qcz8zZThjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG5cbiAgICBHYWxsZXJ5ID0ge1xuICAgICAgICBkb206IHt9LFxuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAvLyBjb25maWc6IHtcbiAgICAgICAgLy8gICAgIG1pbldpZHRoOiAzMDAsXG4gICAgICAgIC8vICAgICBtaW5IZWlnaHQ6IDMwMCxcbiAgICAgICAgLy8gICAgIGhvcml6b250YWxQYWRkaW5nOiA4MCxcbiAgICAgICAgLy8gICAgIHZlcnRpY2FsUGFkZGluZzogODAsXG4gICAgICAgIC8vICAgICBsZWZ0QXJlYTogMC4yMCxcbiAgICAgICAgLy8gICAgIHByZWZlY3RoOiA1XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgbWluV2lkdGg6IDMwMCxcbiAgICAgICAgICAgIG1pbkhlaWdodDogMzAwLFxuICAgICAgICAgICAgaG9yaXpvbnRhbFBhZGRpbmc6IDIwLCAvLyBSZWR1Y2lkbyBwYXJhIG3Ds3ZpbGVzXG4gICAgICAgICAgICB2ZXJ0aWNhbFBhZGRpbmc6IDIwLCAvLyBSZWR1Y2lkbyBwYXJhIG3Ds3ZpbGVzXG4gICAgICAgICAgICBsZWZ0QXJlYTogMC4zLCAvLyBBdW1lbnRhZG8gcGFyYSBmYWNpbGl0YXIgZWwgdG9xdWVcbiAgICAgICAgICAgIHByZWZldGNoOiAzIC8vIFJlZHVjaWRvIHBhcmEgYWhvcnJhciBkYXRvcyBlbiBtw7N2aWxlc1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREb206IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm92ZXJsYXkgPSBlKCdkaXYnLCAnZ2FsbGVyeS1vdmVybGF5JywgZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgR2FsbGVyeS5jbG9zZSk7XG5cbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm91dGVyID0gZSgnZGl2JywgJ2dhbGxlcnktb3V0ZXInLCBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmlubmVyID0gZSgnZGl2JywgJ2dhbGxlcnktaW5uZXInLCBHYWxsZXJ5LmRvbS5vdXRlcik7XG5cbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnNjcmVlbiA9IGUoJ2RpdicsICdnYWxsZXJ5LXNjcmVlbicsIEdhbGxlcnkuZG9tLmlubmVyKTtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnNjcmVlbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBHYWxsZXJ5Lm1vdXNlbW92ZSk7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5zY3JlZW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBHYWxsZXJ5LmNsaWNrKTtcblxuICAgICAgICAgICAgR2FsbGVyeS5kb20ubGVmdCA9IGUoJ2RpdicsICdnYWxsZXJ5LWxlZnQnLCBHYWxsZXJ5LmRvbS5zY3JlZW4pO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20ucmlnaHQgPSBlKCdkaXYnLCAnZ2FsbGVyeS1yaWdodCcsIEdhbGxlcnkuZG9tLnNjcmVlbik7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZSA9IGUoJ2ltZycsICdnYWxsZXJ5LWltYWdlJywgR2FsbGVyeS5kb20uc2NyZWVuKTtcblxuICAgICAgICAgICAgR2FsbGVyeS5kb20uZnVsbHNjcmVlbiA9IGUoJ2RpdicsICdnYWxsZXJ5LWZ1bGxzY3JlZW4nLCBHYWxsZXJ5LmRvbS5zY3JlZW4pO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uZnVsbHNjcmVlbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEdhbGxlcnkuZnVsbHNjcmVlbik7XG4gICAgICAgICAgICBpZiAoIWNhbkZ1bGxTY3JlZW4oKSkge1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmZ1bGxzY3JlZW4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgR2FsbGVyeS5kb20uYm90dG9tYmFyID0gZSgnZGl2JywgJ2dhbGxlcnktYm90dG9tYmFyJywgR2FsbGVyeS5kb20uc2NyZWVuKTtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmNvdW50ID0gZSgnc3BhbicsICdnYWxsZXJ5LWNvdW50JywgR2FsbGVyeS5kb20uYm90dG9tYmFyKTtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmNsb3NlID0gZSgnYScsICdnYWxsZXJ5LWNsb3NlJywgR2FsbGVyeS5kb20uYm90dG9tYmFyKTtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmNsb3NlLmlubmVySFRNTCA9ICdDbG9zZSc7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5jbG9zZS5ocmVmID0gJ2phdmFzY3JpcHQ6Oyc7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5jbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEdhbGxlcnkuY2xvc2UpO1xuXG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vcmlnaW5hbCA9IGUoJ2EnLCAnZ2FsbGVyeS1vcmlnaW5hbCcsIEdhbGxlcnkuZG9tLmJvdHRvbWJhcik7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vcmlnaW5hbC50YXJnZXQgPSAnX2JsYW5rJztcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm9yaWdpbmFsLmlubmVySFRNTCA9ICdPcmlnaW5hbCc7XG5cbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5zcmMgPSBHYWxsZXJ5LmltYWdlc1tHYWxsZXJ5LmN1cnJlbnRdLmhyZWY7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1hZ2Uuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5yZXNpemUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLnNjcmVlbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgR2FsbGVyeS50b3VjaHN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uc2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIEdhbGxlcnkudG91Y2htb3ZlLCB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uc2NyZWVuLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgR2FsbGVyeS50b3VjaGVuZCk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIEdhbGxlcnkucmVzaXplKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBHYWxsZXJ5LnJlc2l6ZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChHYWxsZXJ5LmRvbS5vdmVybGF5LnN0eWxlLmRpc3BsYXkgIT09ICdibG9jaycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgd2hlbiB0aGUgZ2FsbGVyeSBpc24ndCBkaXNwbGF5ZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJpZ2h0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5KSB7XG4gICAgICAgICAgICAgICAgICAgIEdhbGxlcnkuY2hhbmdlKCsxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBMZWZ0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgIEdhbGxlcnkuY2hhbmdlKC0xKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFc2NhcGVcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBEbyBub3QgaW5pdGlhbGl6ZSB0aGUgRE9NIG1vcmUgdGhhbiBvbmNlXG4gICAgICAgICAgICBHYWxsZXJ5LmluaXREb20gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FsbGVyeVtpZF0gYScpO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChsaW5rcywgZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgR2FsbGVyeS5zaG93RXZlbnQpO1xuICAgICAgICAgICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBHYWxsZXJ5LnNob3dFdmVudCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmV0cmlldmUgI2ltYWdlPW5hbWU6cG9zIGluIHRoZSBVUkxcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2guaW5kZXhPZignaW1hZ2U9Jyk7XG4gICAgICAgICAgICBpZiAoc3RhcnQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGhhc2guc3Vic3RyKHN0YXJ0ICsgJ2ltYWdlPScubGVuZ3RoKS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIHZhciBnYWxsZXJ5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbGxlcnktJyArIHBhcnRzWzBdKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2FsbGVyeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluayA9IGdhbGxlcnkucXVlcnlTZWxlY3RvckFsbCgnYScpW3BhcnRzWzFdIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBmb3VuZCB0aGUgZ2FsbGVyeSBhbmQgaW1hZ2UsIHRoZW4gc2hvdyB0aGUgZ2FsbGVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5zaG93KGxpbmspO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldE9mZnNldFg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldFggPSBldmVudC5vZmZzZXRYO1xuICAgICAgICAgICAgaWYgKGV2ZW50Lm9mZnNldFggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIFVzaW5nIGRlcHJlY2F0ZWQgYXR0cmlidXRlcyBvbiBGaXJlZm94XG4gICAgICAgICAgICAgICAgb2Zmc2V0WCA9IGV2ZW50LmxheWVyWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSBHYWxsZXJ5LmRvbS5zY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBvZmZzZXRYICs9IHRhcmdldC5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9mZnNldFg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNCb3R0b21CYXI6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgIHdoaWxlICh0YXJnZXQgIT09IEdhbGxlcnkuZG9tLnNjcmVlbikge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IEdhbGxlcnkuZG9tLmJvdHRvbWJhcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW91c2Vtb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgTGVmdCBvciBSaWdodCBhcnJvd1xuICAgICAgICAgICAgaWYgKEdhbGxlcnkuaXNCb3R0b21CYXIoZXZlbnQpIHx8IGV2ZW50LnRhcmdldCA9PT0gR2FsbGVyeS5kb20uZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmxlZnQuY2xhc3NOYW1lID0gJ2dhbGxlcnktbGVmdCc7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20ucmlnaHQuY2xhc3NOYW1lID0gJ2dhbGxlcnktcmlnaHQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChHYWxsZXJ5LmdldE9mZnNldFgoZXZlbnQpIDwgR2FsbGVyeS53aWR0aCAqIEdhbGxlcnkuY29uZmlnLmxlZnRBcmVhKSB7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20ubGVmdC5jbGFzc05hbWUgPSAnZ2FsbGVyeS1sZWZ0IGdhbGxlcnktYWN0aXZlJztcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5yaWdodC5jbGFzc05hbWUgPSAnZ2FsbGVyeS1yaWdodCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmxlZnQuY2xhc3NOYW1lID0gJ2dhbGxlcnktbGVmdCc7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20ucmlnaHQuY2xhc3NOYW1lID0gJ2dhbGxlcnktcmlnaHQgZ2FsbGVyeS1hY3RpdmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChHYWxsZXJ5LmlzQm90dG9tQmFyKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoR2FsbGVyeS5nZXRPZmZzZXRYKGV2ZW50KSA8IEdhbGxlcnkud2lkdGggKiBHYWxsZXJ5LmNvbmZpZy5sZWZ0QXJlYSkge1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuY2hhbmdlKC0xKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5jaGFuZ2UoKzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgICAgICBHYWxsZXJ5LmN1cnJlbnQgPSBtb2QoR2FsbGVyeS5jdXJyZW50ICsgZGVsdGEsIEdhbGxlcnkuaW1hZ2VzLmxlbmd0aCk7XG4gICAgICAgICAgICBHYWxsZXJ5LnVwZGF0ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uY291bnQuaW5uZXJIVE1MID0gKEdhbGxlcnkuY3VycmVudCArIDEpICsgJyBvZiAnICsgR2FsbGVyeS5pbWFnZXMubGVuZ3RoO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1nLnNyYyA9IEdhbGxlcnkuaW1hZ2VzW0dhbGxlcnkuY3VycmVudF0uaHJlZjtcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm9yaWdpbmFsLmhyZWYgPSBHYWxsZXJ5LmltYWdlc1tHYWxsZXJ5LmN1cnJlbnRdLmhyZWY7XG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gJ2ltYWdlPScgKyBHYWxsZXJ5LmlkICsgJzonICsgKEdhbGxlcnkuY3VycmVudCArIDEpO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1hZ2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIEdhbGxlcnkucmVzaXplKCk7XG5cbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltYWdlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMHB4LCAwcHgpIHNjYWxlKDEpJztcbiAgICAgICAgICAgIEdhbGxlcnkuY3VycmVudFNjYWxlID0gMTtcblxuICAgICAgICAgICAgLy8gUHJlZmV0Y2ggdGhlIG5leHQgTiBpbWFnZVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBHYWxsZXJ5LmNvbmZpZy5wcmVmZWN0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBtb2QoR2FsbGVyeS5jdXJyZW50ICsgaSArIDEsIEdhbGxlcnkuaW1hZ2VzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbmV3IEltYWdlKCkuc3JjID0gR2FsbGVyeS5pbWFnZXNbbmV4dF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZnVsbHNjcmVlbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBnb0Z1bGxTY3JlZW4oR2FsbGVyeS5kb20uaW5uZXIpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXNGdWxsU2NyZWVuKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHRoZSBnYWxsZXJ5IGF0IHRoZSB0b3AgbGVmdCBhbmQgZnVsbCB3aWR0aC9oZWlnaHRcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmlubmVyLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAvLyBIaWRlIHRoZSBmdWxsIHNjcmVlbiBpY29uXG4gICAgICAgICAgICAgICAgR2FsbGVyeS5kb20uZnVsbHNjcmVlbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZGltZW5zaW9uIG11c3QgYmUgKGluIG9yZGVyIG9mIHByaW9yaXR5KVxuICAgICAgICAgICAgICAgIC8vIC0gQXQgbGVhc3QgdGhlIG1pbmltdW0gZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgIC8vIC0gS2VlcCBhIHBhZGRpbmcgb24gdGhlIHdpbmRvd1xuICAgICAgICAgICAgICAgIC8vIC0gRXF1YWwgb3IgbGFyZ2VyIHRoYW4gdGhlIHByZXZpb3VzIGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICAvLyAtIFRoZSBkaW1lbnNpb24gb2YgdGhlIGltYWdlXG4gICAgICAgICAgICAgICAgR2FsbGVyeS53aWR0aCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICBHYWxsZXJ5LmNvbmZpZy5taW5XaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oTWF0aC5tYXgoR2FsbGVyeS53aWR0aCwgR2FsbGVyeS5kb20uaW1nLndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC0gR2FsbGVyeS5jb25maWcuaG9yaXpvbnRhbFBhZGRpbmcpKTtcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmhlaWdodCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICBHYWxsZXJ5LmNvbmZpZy5taW5IZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWluKE1hdGgubWF4KEdhbGxlcnkuaGVpZ2h0LCBHYWxsZXJ5LmRvbS5pbWcuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAtIEdhbGxlcnkuY29uZmlnLnZlcnRpY2FsUGFkZGluZykpO1xuXG4gICAgICAgICAgICAgICAgLy8gVG9wIGxlZnQgb2YgaW5uZXIgaW5pdGlhbGx5IGlzIGF0IHRoZSBtaWRkbGUgb2YgdGhlIHNjcmVlbiBkdWUgdG9cbiAgICAgICAgICAgICAgICAvLyB0aGUgQ1NTIGhhY2suIFB1dCBhIG5lZ2F0aXZlIHBvc2l0aW9uIHRvIG1ha2UgaXQgYXQgdGhlIHJpZ2h0IHNwb3RcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS5sZWZ0ID0gKC1HYWxsZXJ5LndpZHRoIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuZG9tLmlubmVyLnN0eWxlLnRvcCA9ICgtR2FsbGVyeS5oZWlnaHQgLyAyKSArICdweCc7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FuRnVsbFNjcmVlbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3cgdGhlIGZ1bGwgc2NyZWVuIGljb25cbiAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5kb20uZnVsbHNjcmVlbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbm5lci5zdHlsZS53aWR0aCA9IEdhbGxlcnkud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW5uZXIuc3R5bGUuaGVpZ2h0ID0gR2FsbGVyeS5oZWlnaHQgKyAncHgnO1xuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBpbWFnZSBkaW1lbnNpb25zIGdpdmVuIHRoZSBnYWxsZXJ5IHNpemVcbiAgICAgICAgICAgIHZhciByYXRpbyA9IEdhbGxlcnkuZG9tLmltZy53aWR0aCAvIEdhbGxlcnkuZG9tLmltZy5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgd2lkdGgsIGhlaWdodDtcblxuICAgICAgICAgICAgaWYgKEdhbGxlcnkud2lkdGggPCBHYWxsZXJ5LmRvbS5pbWcud2lkdGggfHwgR2FsbGVyeS5oZWlnaHQgPCBHYWxsZXJ5LmRvbS5pbWcuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGdhbGxlcnkgaXMgc21hbGxlciB0aGFuIHRoZSBpbWFnZS5cbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZml0IHRoZSBpbWFnZSBpbiB0aGUgd2lkdGggYW5kIHNlZSB3aGF0IHRoZSBoZWlnaHQgaXNcbiAgICAgICAgICAgICAgICB3aWR0aCA9IEdhbGxlcnkud2lkdGg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gR2FsbGVyeS53aWR0aCAvIHJhdGlvO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhlaWdodCA+IEdhbGxlcnkuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoZWlnaHQgZG9lc24ndCBmaXQsIHRoZW4gd2Ugc2hvdWxkIHJlc2l6ZSBmb3IgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gR2FsbGVyeS5oZWlnaHQgKiByYXRpbztcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gR2FsbGVyeS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZ2FsbGVyeSBpcyBsYXJnZSBlbm91Z2ggdG8gaG9sZCB0aGUgaW1hZ2UsIGdvb2QhXG4gICAgICAgICAgICAgICAgd2lkdGggPSBHYWxsZXJ5LmRvbS5pbWcud2lkdGg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gR2FsbGVyeS5kb20uaW1nLmhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltYWdlLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIE1vdmUgdGhlIGltYWdlIGlzIHRoZSBjZW50ZXIgb2YgdGhlIGdhbGxlcnlcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltYWdlLnN0eWxlLmxlZnQgPSAoR2FsbGVyeS53aWR0aCAvIDIgLSB3aWR0aCAvIDIpICsgJ3B4JztcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLmltYWdlLnN0eWxlLnRvcCA9IChHYWxsZXJ5LmhlaWdodCAvIDIgLSBoZWlnaHQgLyAyKSArICdweCc7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaGVpZ2h0IG9mIHRoZSBvdmVybGF5XG4gICAgICAgICAgICAvLyBHYWxsZXJ5LmRvbS5vdmVybGF5LnN0eWxlLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArICdweCc7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vdmVybGF5LnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIGdhbGxlcnlcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm91dGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBtaW5pbWFsIHdpZHRoL2hlaWdodCB0aGUgZ2FsbGVyeSBjYW4gdGFrZVxuICAgICAgICAgICAgR2FsbGVyeS53aWR0aCA9IDA7XG4gICAgICAgICAgICBHYWxsZXJ5LmhlaWdodCA9IDA7XG5cbiAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICBjYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gJ18nO1xuICAgICAgICAgICAgR2FsbGVyeS5kb20uaW1nLnNyYyA9ICcnO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEJ1YmJsZSB1cCB1bnRpbCB3ZSBmaW5kIHRoZSA8YT4gdGhhdCB0cmlnZ2VyZWQgdGhlIGV2ZW50XG4gICAgICAgICAgICB2YXIgbGluayA9IHRhcmdldDtcbiAgICAgICAgICAgIHdoaWxlIChsaW5rLm5vZGVOYW1lICE9PSAnQScpIHtcbiAgICAgICAgICAgICAgICBsaW5rID0gbGluay5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCdWJibGUgdXAgdW50aWwgd2UgZmluZCB0aGUgZW5jbG9zaW5nIGdhbGxlcnlcbiAgICAgICAgICAgIHZhciBnYWxsZXJ5ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB3aGlsZSAoZ2FsbGVyeS5jbGFzc05hbWUuaW5kZXhPZignZ2FsbGVyeScpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGdhbGxlcnkgPSBnYWxsZXJ5LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCBzdGF0ZVxuICAgICAgICAgICAgR2FsbGVyeS5pZCA9IGdhbGxlcnkuaWQucmVwbGFjZSgvXmdhbGxlcnktLywgJycpO1xuICAgICAgICAgICAgR2FsbGVyeS5pbWFnZXMgPSBnYWxsZXJ5LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTtcbiAgICAgICAgICAgIEdhbGxlcnkuY3VycmVudCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoR2FsbGVyeS5pbWFnZXMsIGxpbmspO1xuXG4gICAgICAgICAgICBHYWxsZXJ5LmluaXREb20oKTtcbiAgICAgICAgICAgIEdhbGxlcnkudXBkYXRlKCk7XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIGdhbGxlcnlcbiAgICAgICAgICAgIEdhbGxlcnkuZG9tLm92ZXJsYXkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICBHYWxsZXJ5LmRvbS5vdXRlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93RXZlbnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLy8gT25seSBsZWZ0IGNsaWNrXG4gICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgR2FsbGVyeS5zaG93KGV2ZW50LnRhcmdldCk7XG5cbiAgICAgICAgICAgIC8vIFB1dCBpdCBhdCB0aGUgZW5kIHNvIHRoYXQgaXQgXCJncmFjZWZ1bGx5XCIgZGVncmFkZSBpZiB0aGUgYnJvd3NlciBzdWNrc1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG91Y2hzdGFydDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBHYWxsZXJ5LnRvdWNoU3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBHYWxsZXJ5LnRvdWNoU3RhcnRYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgR2FsbGVyeS50b3VjaFN0YXJ0WSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgICAgIEdhbGxlcnkubGFzdFRvdWNoWCA9IEdhbGxlcnkudG91Y2hTdGFydFg7XG4gICAgICAgICAgICBHYWxsZXJ5Lmxhc3RUb3VjaFkgPSBHYWxsZXJ5LnRvdWNoU3RhcnRZO1xuICAgICAgICAgICAgR2FsbGVyeS5pc1RvdWNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIEdhbGxlcnkuaGFzTW92ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBHYWxsZXJ5Lnpvb21pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuc3RhcnREaXN0YW5jZSA9IEdhbGxlcnkuZ2V0RGlzdGFuY2UoZXZlbnQudG91Y2hlc1swXSwgZXZlbnQudG91Y2hlc1sxXSk7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5zdGFydFNjYWxlID0gR2FsbGVyeS5jdXJyZW50U2NhbGUgfHwgMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS56b29taW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG91Y2htb3ZlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChHYWxsZXJ5Lnpvb21pbmcgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdEaXN0YW5jZSA9IEdhbGxlcnkuZ2V0RGlzdGFuY2UoZXZlbnQudG91Y2hlc1swXSwgZXZlbnQudG91Y2hlc1sxXSk7XG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gKG5ld0Rpc3RhbmNlIC8gR2FsbGVyeS5zdGFydERpc3RhbmNlKSAqIEdhbGxlcnkuc3RhcnRTY2FsZTtcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LnNldEltYWdlU2NhbGUoc2NhbGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciB0b3VjaE1vdmVYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgICAgIHZhciB0b3VjaE1vdmVZID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YVggPSB0b3VjaE1vdmVYIC0gR2FsbGVyeS5sYXN0VG91Y2hYO1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YVkgPSB0b3VjaE1vdmVZIC0gR2FsbGVyeS5sYXN0VG91Y2hZO1xuXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRvdWNoTW92ZVggLSBHYWxsZXJ5LnRvdWNoU3RhcnRYKSA+IDEwIHx8IE1hdGguYWJzKHRvdWNoTW92ZVkgLSBHYWxsZXJ5LnRvdWNoU3RhcnRZKSA+IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIEdhbGxlcnkuaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChHYWxsZXJ5LmN1cnJlbnRTY2FsZSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgR2FsbGVyeS5wYW5JbWFnZShkZWx0YVgsIGRlbHRhWSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgR2FsbGVyeS5sYXN0VG91Y2hYID0gdG91Y2hNb3ZlWDtcbiAgICAgICAgICAgICAgICBHYWxsZXJ5Lmxhc3RUb3VjaFkgPSB0b3VjaE1vdmVZO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRvdWNoZW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB0b3VjaEVuZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHZhciB0b3VjaFRpbWUgPSB0b3VjaEVuZFRpbWUgLSBHYWxsZXJ5LnRvdWNoU3RhcnRUaW1lO1xuXG4gICAgICAgICAgICBpZiAoR2FsbGVyeS56b29taW5nKSB7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS56b29taW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgR2FsbGVyeS5jdXJyZW50U2NhbGUgPSBHYWxsZXJ5LmdldEltYWdlU2NhbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAoIUdhbGxlcnkuaGFzTW92ZWQgJiYgdG91Y2hUaW1lIDwgMzAwKSB7XG4gICAgICAgICAgICAvLyAgIHZhciB0b3VjaEVuZFggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICAgICAgLy8gICBpZiAodG91Y2hFbmRYIDwgR2FsbGVyeS53aWR0aCAqIEdhbGxlcnkuY29uZmlnLmxlZnRBcmVhKSB7XG4gICAgICAgICAgICAvLyAgICAgR2FsbGVyeS5jaGFuZ2UoLTEpO1xuICAgICAgICAgICAgLy8gICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgIEdhbGxlcnkuY2hhbmdlKCsxKTtcbiAgICAgICAgICAgIC8vICAgfVxuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBHYWxsZXJ5LmlzVG91Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIEdhbGxlcnkuaGFzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYW5JbWFnZTogZnVuY3Rpb24gKGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgICAgICAgICB2YXIgaW1nID0gR2FsbGVyeS5kb20uaW1hZ2U7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IGltZy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gR2FsbGVyeS5kb20uc2NyZWVuLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICAvLyBPYnRlbmVyIGxhIHRyYXNsYWNpw7NuIGFjdHVhbFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBpbWcuc3R5bGUudHJhbnNmb3JtIHx8ICcnO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRUcmFuc2xhdGUgPSBjdXJyZW50VHJhbnNmb3JtLm1hdGNoKC90cmFuc2xhdGVcXCgoLio/KVxcKS8pIHx8IFsnJywgJzBweCwgMHB4J107XG4gICAgICAgICAgICB2YXIgW2N1cnJlbnRYLCBjdXJyZW50WV0gPSBjdXJyZW50VHJhbnNsYXRlWzFdLnNwbGl0KCcsJykubWFwKHZhbCA9PiBwYXJzZUZsb2F0KHZhbCkgfHwgMCk7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGFyIGxhIG51ZXZhIHBvc2ljacOzblxuICAgICAgICAgICAgdmFyIG5ld1ggPSBjdXJyZW50WCArIGRlbHRhWDtcbiAgICAgICAgICAgIHZhciBuZXdZID0gY3VycmVudFkgKyBkZWx0YVk7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGFyIGxvcyBsw61taXRlcyBkZSBtb3ZpbWllbnRvXG4gICAgICAgICAgICB2YXIgc2NhbGVkV2lkdGggPSByZWN0LndpZHRoIC8gR2FsbGVyeS5jdXJyZW50U2NhbGU7XG4gICAgICAgICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gcmVjdC5oZWlnaHQgLyBHYWxsZXJ5LmN1cnJlbnRTY2FsZTtcbiAgICAgICAgICAgIHZhciBtYXhYID0gTWF0aC5tYXgoMCwgKHNjYWxlZFdpZHRoIC0gY29udGFpbmVyUmVjdC53aWR0aCkgLyAyKTtcbiAgICAgICAgICAgIHZhciBtYXhZID0gTWF0aC5tYXgoMCwgKHNjYWxlZEhlaWdodCAtIGNvbnRhaW5lclJlY3QuaGVpZ2h0KSAvIDIpO1xuXG4gICAgICAgICAgICAvLyBMaW1pdGFyIGVsIG1vdmltaWVudG9cbiAgICAgICAgICAgIG5ld1ggPSBNYXRoLm1heCgtbWF4WCwgTWF0aC5taW4obmV3WCwgbWF4WCkpO1xuICAgICAgICAgICAgbmV3WSA9IE1hdGgubWF4KC1tYXhZLCBNYXRoLm1pbihuZXdZLCBtYXhZKSk7XG5cbiAgICAgICAgICAgIC8vIEFwbGljYXIgbGEgbnVldmEgdHJhbnNmb3JtYWNpw7NuXG4gICAgICAgICAgICBpbWcuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke25ld1h9cHgsICR7bmV3WX1weCkgc2NhbGUoJHtHYWxsZXJ5LmN1cnJlbnRTY2FsZX0pYDtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRJbWFnZVNjYWxlOiBmdW5jdGlvbiAoc2NhbGUpIHtcbiAgICAgICAgICAgIHNjYWxlID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oc2NhbGUsIDMpKTsgLy8gTGltaXRhIGVsIHpvb20gZW50cmUgMXggeSAzeFxuICAgICAgICAgICAgR2FsbGVyeS5jdXJyZW50U2NhbGUgPSBzY2FsZTtcbiAgICAgICAgICAgIHZhciBpbWcgPSBHYWxsZXJ5LmRvbS5pbWFnZTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gaW1nLnN0eWxlLnRyYW5zZm9ybSB8fCAnJztcbiAgICAgICAgICAgIHZhciBjdXJyZW50VHJhbnNsYXRlID0gY3VycmVudFRyYW5zZm9ybS5tYXRjaCgvdHJhbnNsYXRlXFwoKC4qPylcXCkvKSB8fCBbJ3RyYW5zbGF0ZSgwcHgsIDBweCknXTtcblxuICAgICAgICAgICAgaW1nLnN0eWxlLnRyYW5zZm9ybSA9IGAke2N1cnJlbnRUcmFuc2xhdGVbMF19IHNjYWxlKCR7c2NhbGV9KWA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0SW1hZ2VTY2FsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IEdhbGxlcnkuZG9tLmltYWdlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgICAgIHZhciBzY2FsZU1hdGNoID0gdHJhbnNmb3JtLm1hdGNoKC9zY2FsZVxcKCguKj8pXFwpLyk7XG4gICAgICAgICAgICByZXR1cm4gc2NhbGVNYXRjaCA/IHBhcnNlRmxvYXQoc2NhbGVNYXRjaFsxXSkgOiAxO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gbW9kKEdhbGxlcnkuY3VycmVudCArIGRlbHRhLCBHYWxsZXJ5LmltYWdlcy5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIG5leHRJbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIG5leHRJbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIEdhbGxlcnkuY3VycmVudCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LmRvbS5pbWFnZS5zcmMgPSBuZXh0SW1nLnNyYztcbiAgICAgICAgICAgICAgICBHYWxsZXJ5LnVwZGF0ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG5leHRJbWcuc3JjID0gR2FsbGVyeS5pbWFnZXNbbmV4dEluZGV4XS5ocmVmO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldERpc3RhbmNlOiBmdW5jdGlvbiAodG91Y2gxLCB0b3VjaDIpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHRvdWNoMS5jbGllbnRYIC0gdG91Y2gyLmNsaWVudFg7XG4gICAgICAgICAgICB2YXIgZHkgPSB0b3VjaDEuY2xpZW50WSAtIHRvdWNoMi5jbGllbnRZO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBHYWxsZXJ5LmluaXQpO1xuXG5cbiAgICAvLyBVdGlsaXRpZXNcblxuICAgIC8vIEZ1bGwgU2NyZWVuXG5cbiAgICBmdW5jdGlvbiBjYW5GdWxsU2NyZWVuKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbiB8fFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZXF1ZXN0RnVsbFNjcmVlbiB8fFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5tb3pSZXF1ZXN0RnVsbFNjcmVlbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0Z1bGxTY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5mdWxsU2NyZWVuRWxlbWVudCB8fFxuICAgICAgICAgICAgZG9jdW1lbnQubW96RnVsbFNjcmVlbiB8fFxuICAgICAgICAgICAgZG9jdW1lbnQud2Via2l0SXNGdWxsU2NyZWVuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdvRnVsbFNjcmVlbihlbGVtKSB7XG4gICAgICAgIGlmIChlbGVtLnJlcXVlc3RGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICBlbGVtLnJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbS5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICAgICAgZWxlbS5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW0ud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgIGVsZW0ud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbmNlbEZ1bGxTY3JlZW4oKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdENhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgIGRvY3VtZW50LndlYmtpdENhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gU21hbGwgRE9NIGNvbnN0cnVjdG9yXG5cbiAgICBmdW5jdGlvbiBlKG5hbWUsIGNsYXNzTmFtZSwgcGFyZW50KSB7XG4gICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG5cbiAgICAvLyBNb2R1bG8gdGhhdCB3b3JrcyB3aXRoIG5lZ2F0aXZlIG51bWJlcnNcblxuICAgIGZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gICAgICAgIHJldHVybiAoKGEgJSBiKSArIGIpICUgYjtcbiAgICB9XG5cbn0pKCk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7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QUFpQixJQUMvQnhKLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDd0osb0JBQW9CO0VBQzFDO0VBRUEsU0FBUzFFLFlBQVlBLENBQUEsRUFBRztJQUNwQixPQUFPL0UsUUFBUSxDQUFDMEosaUJBQWlCLElBQzdCMUosUUFBUSxDQUFDMkosYUFBYSxJQUN0QjNKLFFBQVEsQ0FBQzRKLGtCQUFrQjtFQUNuQztFQUVBLFNBQVMvRSxZQUFZQSxDQUFDakMsSUFBSSxFQUFFO0lBQ3hCLElBQUlBLElBQUksQ0FBQzRHLGlCQUFpQixFQUFFO01BQ3hCNUcsSUFBSSxDQUFDNEcsaUJBQWlCLENBQUMsQ0FBQztJQUM1QixDQUFDLE1BQU0sSUFBSTVHLElBQUksQ0FBQzZHLG9CQUFvQixFQUFFO01BQ2xDN0csSUFBSSxDQUFDNkcsb0JBQW9CLENBQUMsQ0FBQztJQUMvQixDQUFDLE1BQU0sSUFBSTdHLElBQUksQ0FBQzJHLHVCQUF1QixFQUFFO01BQ3JDM0csSUFBSSxDQUFDMkcsdUJBQXVCLENBQUMsQ0FBQztJQUNsQztFQUNKO0VBRUEsU0FBU2hFLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ3hCLElBQUl2RixRQUFRLENBQUN1RixnQkFBZ0IsRUFBRTtNQUMzQnZGLFFBQVEsQ0FBQ3VGLGdCQUFnQixDQUFDLENBQUM7SUFDL0IsQ0FBQyxNQUFNLElBQUl2RixRQUFRLENBQUM2SixtQkFBbUIsRUFBRTtNQUNyQzdKLFFBQVEsQ0FBQzZKLG1CQUFtQixDQUFDLENBQUM7SUFDbEMsQ0FBQyxNQUFNLElBQUk3SixRQUFRLENBQUM4SixzQkFBc0IsRUFBRTtNQUN4QzlKLFFBQVEsQ0FBQzhKLHNCQUFzQixDQUFDLENBQUM7SUFDckM7RUFDSjs7RUFHQTs7RUFFQSxTQUFTL0osQ0FBQ0EsQ0FBQ2dLLElBQUksRUFBRTdGLFNBQVMsRUFBRThGLE1BQU0sRUFBRTtJQUNoQyxJQUFJcEgsSUFBSSxHQUFHNUMsUUFBUSxDQUFDdUIsYUFBYSxDQUFDd0ksSUFBSSxDQUFDO0lBQ3ZDQyxNQUFNLENBQUNDLFdBQVcsQ0FBQ3JILElBQUksQ0FBQztJQUN4QixJQUFJc0IsU0FBUyxFQUFFO01BQ1h0QixJQUFJLENBQUNzQixTQUFTLEdBQUdBLFNBQVM7SUFDOUI7SUFDQSxPQUFPdEIsSUFBSTtFQUNmOztFQUVBOztFQUVBLFNBQVN3QixHQUFHQSxDQUFDOEYsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7SUFDZixPQUFPLENBQUVELENBQUMsR0FBR0MsQ0FBQyxHQUFJQSxDQUFDLElBQUlBLENBQUM7RUFDNUI7QUFFSixDQUFDLEVBQUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./resources/js/gallery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/gallery.js"]();
/******/ 	
/******/ })()
;