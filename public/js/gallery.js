/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/gallery.js":
/*!*********************************!*\
  !*** ./resources/js/gallery.js ***!
  \*********************************/
/***/ (() => {

eval("(function () {\n  Gallery = {\n    dom: {},\n    width: 0,\n    height: 0,\n    // config: {\n    //     minWidth: 300,\n    //     minHeight: 300,\n    //     horizontalPadding: 80,\n    //     verticalPadding: 80,\n    //     leftArea: 0.20,\n    //     prefecth: 5\n    // },\n    onfig: {\n      minWidth: 300,\n      minHeight: 300,\n      horizontalPadding: 20,\n      // Reducido para móviles\n      verticalPadding: 20,\n      // Reducido para móviles\n      leftArea: 0.3,\n      // Aumentado para facilitar el toque\n      prefetch: 3 // Reducido para ahorrar datos en móviles\n    },\n    initDom: function initDom() {\n      Gallery.dom.overlay = e('div', 'gallery-overlay', document.body);\n      Gallery.dom.overlay.addEventListener('click', Gallery.close);\n      Gallery.dom.outer = e('div', 'gallery-outer', document.body);\n      Gallery.dom.inner = e('div', 'gallery-inner', Gallery.dom.outer);\n      Gallery.dom.screen = e('div', 'gallery-screen', Gallery.dom.inner);\n      Gallery.dom.screen.addEventListener('mousemove', Gallery.mousemove);\n      Gallery.dom.screen.addEventListener('click', Gallery.click);\n      Gallery.dom.left = e('div', 'gallery-left', Gallery.dom.screen);\n      Gallery.dom.right = e('div', 'gallery-right', Gallery.dom.screen);\n      Gallery.dom.image = e('img', 'gallery-image', Gallery.dom.screen);\n      Gallery.dom.fullscreen = e('div', 'gallery-fullscreen', Gallery.dom.screen);\n      Gallery.dom.fullscreen.addEventListener('click', Gallery.fullscreen);\n      if (!canFullScreen()) {\n        Gallery.dom.fullscreen.style.display = 'none';\n      }\n      Gallery.dom.bottombar = e('div', 'gallery-bottombar', Gallery.dom.screen);\n      Gallery.dom.count = e('span', 'gallery-count', Gallery.dom.bottombar);\n      Gallery.dom.close = e('a', 'gallery-close', Gallery.dom.bottombar);\n      Gallery.dom.close.innerHTML = 'Close';\n      Gallery.dom.close.href = 'javascript:;';\n      Gallery.dom.close.addEventListener('click', Gallery.close);\n      Gallery.dom.original = e('a', 'gallery-original', Gallery.dom.bottombar);\n      Gallery.dom.original.target = '_blank';\n      Gallery.dom.original.innerHTML = 'Original';\n      Gallery.dom.img = document.createElement('img');\n      Gallery.dom.img.onload = function () {\n        Gallery.dom.image.src = Gallery.images[Gallery.current].href;\n        Gallery.dom.image.style.display = 'block';\n        Gallery.resize();\n      };\n      Gallery.dom.screen.addEventListener('touchstart', Gallery.touchstart, {\n        passive: false\n      });\n      Gallery.dom.screen.addEventListener('touchmove', Gallery.touchmove, {\n        passive: false\n      });\n      Gallery.dom.screen.addEventListener('touchend', Gallery.touchend);\n      window.addEventListener('orientationchange', Gallery.resize);\n      window.addEventListener('resize', Gallery.resize);\n      window.addEventListener('keydown', function (event) {\n        if (Gallery.dom.overlay.style.display !== 'block') {\n          // Don't do anything when the gallery isn't displayed\n          return;\n        }\n\n        // Right\n        if (event.keyCode === 39) {\n          Gallery.change(+1);\n        }\n\n        // Left\n        if (event.keyCode === 37) {\n          Gallery.change(-1);\n        }\n\n        // Escape\n        if (event.keyCode === 27) {\n          Gallery.close();\n        }\n      });\n\n      // Do not initialize the DOM more than once\n      Gallery.initDom = function () {};\n    },\n    init: function init() {\n      var links = document.querySelectorAll('.gallery[id] a');\n      Array.prototype.forEach.call(links, function (elem) {\n        elem.removeEventListener('click', Gallery.showEvent);\n        elem.addEventListener('click', Gallery.showEvent);\n      });\n\n      // Retrieve #image=name:pos in the URL\n      var start = document.location.hash.indexOf('image=');\n      if (start !== -1) {\n        var hash = document.location.hash;\n        var parts = hash.substr(start + 'image='.length).split(':');\n        var gallery = document.getElementById('gallery-' + parts[0]);\n        if (gallery) {\n          var link = gallery.querySelectorAll('a')[parts[1] - 1];\n          if (link) {\n            // If we found the gallery and image, then show the gallery\n            Gallery.show(link);\n          }\n        }\n      }\n    },\n    getOffsetX: function getOffsetX(event) {\n      var offsetX = event.offsetX;\n      if (event.offsetX === undefined) {\n        // Using deprecated attributes on Firefox\n        offsetX = event.layerX;\n      }\n      var target = event.target;\n      while (target !== Gallery.dom.screen) {\n        offsetX += target.offsetLeft;\n        target = target.parentElement;\n      }\n      return offsetX;\n    },\n    isBottomBar: function isBottomBar(event) {\n      var target = event.target;\n      while (target !== Gallery.dom.screen) {\n        if (target === Gallery.dom.bottombar) {\n          return true;\n        }\n        target = target.parentElement;\n      }\n      return false;\n    },\n    mousemove: function mousemove(event) {\n      // Highlight the Left or Right arrow\n      if (Gallery.isBottomBar(event) || event.target === Gallery.dom.fullscreen) {\n        Gallery.dom.left.className = 'gallery-left';\n        Gallery.dom.right.className = 'gallery-right';\n      } else if (Gallery.getOffsetX(event) < Gallery.width * Gallery.config.leftArea) {\n        Gallery.dom.left.className = 'gallery-left gallery-active';\n        Gallery.dom.right.className = 'gallery-right';\n      } else {\n        Gallery.dom.left.className = 'gallery-left';\n        Gallery.dom.right.className = 'gallery-right gallery-active';\n      }\n    },\n    click: function click(event) {\n      if (Gallery.isBottomBar(event)) {\n        return;\n      } else if (Gallery.getOffsetX(event) < Gallery.width * Gallery.config.leftArea) {\n        Gallery.change(-1);\n      } else {\n        Gallery.change(+1);\n      }\n    },\n    change: function change(delta) {\n      Gallery.current = mod(Gallery.current + delta, Gallery.images.length);\n      Gallery.update();\n    },\n    update: function update() {\n      Gallery.dom.count.innerHTML = Gallery.current + 1 + ' of ' + Gallery.images.length;\n      Gallery.dom.img.src = Gallery.images[Gallery.current].href;\n      Gallery.dom.original.href = Gallery.images[Gallery.current].href;\n      document.location.hash = 'image=' + Gallery.id + ':' + (Gallery.current + 1);\n      Gallery.dom.image.style.display = 'none';\n      Gallery.resize();\n      Gallery.dom.image.style.transform = 'scale(1)';\n      Gallery.currentScale = 1;\n\n      // Prefetch the next N image\n      for (var i = 0; i < Gallery.config.prefecth; ++i) {\n        var next = mod(Gallery.current + i + 1, Gallery.images.length);\n        new Image().src = Gallery.images[next];\n      }\n    },\n    fullscreen: function fullscreen(event) {\n      goFullScreen(Gallery.dom.inner);\n      event.stopPropagation();\n    },\n    resize: function resize() {\n      if (isFullScreen()) {\n        // Make the gallery at the top left and full width/height\n        Gallery.dom.inner.style.left = '0';\n        Gallery.dom.inner.style.top = '0';\n        Gallery.width = window.innerWidth;\n        Gallery.height = window.innerHeight;\n\n        // Hide the full screen icon\n        Gallery.dom.fullscreen.style.display = 'none';\n      } else {\n        // The dimension must be (in order of priority)\n        // - At least the minimum dimensions\n        // - Keep a padding on the window\n        // - Equal or larger than the previous dimensions\n        // - The dimension of the image\n        Gallery.width = Math.max(Gallery.config.minWidth, Math.min(Math.max(Gallery.width, Gallery.dom.img.width), window.innerWidth - Gallery.config.horizontalPadding));\n        Gallery.height = Math.max(Gallery.config.minHeight, Math.min(Math.max(Gallery.height, Gallery.dom.img.height), window.innerHeight - Gallery.config.verticalPadding));\n\n        // Top left of inner initially is at the middle of the screen due to\n        // the CSS hack. Put a negative position to make it at the right spot\n        Gallery.dom.inner.style.left = -Gallery.width / 2 + 'px';\n        Gallery.dom.inner.style.top = -Gallery.height / 2 + 'px';\n        if (canFullScreen()) {\n          // Show the full screen icon\n          Gallery.dom.fullscreen.style.display = 'block';\n        }\n      }\n      Gallery.dom.inner.style.width = Gallery.width + 'px';\n      Gallery.dom.inner.style.height = Gallery.height + 'px';\n\n      // Find the image dimensions given the gallery size\n      var ratio = Gallery.dom.img.width / Gallery.dom.img.height;\n      var width, height;\n      if (Gallery.width < Gallery.dom.img.width || Gallery.height < Gallery.dom.img.height) {\n        // If the gallery is smaller than the image.\n        // Try to fit the image in the width and see what the height is\n        width = Gallery.width;\n        height = Gallery.width / ratio;\n        if (height > Gallery.height) {\n          // If the height doesn't fit, then we should resize for height\n          width = Gallery.height * ratio;\n          height = Gallery.height;\n        }\n      } else {\n        // The gallery is large enough to hold the image, good!\n        width = Gallery.dom.img.width;\n        height = Gallery.dom.img.height;\n      }\n      Gallery.dom.image.width = width;\n      Gallery.dom.image.height = height;\n\n      // Move the image is the center of the gallery\n      Gallery.dom.image.style.left = Gallery.width / 2 - width / 2 + 'px';\n      Gallery.dom.image.style.top = Gallery.height / 2 - height / 2 + 'px';\n\n      // Update the height of the overlay\n      Gallery.dom.overlay.style.height = window.innerHeight + 'px';\n    },\n    close: function close() {\n      // Hide the gallery\n      Gallery.dom.overlay.style.display = 'none';\n      Gallery.dom.outer.style.display = 'none';\n\n      // Reset the minimal width/height the gallery can take\n      Gallery.width = 0;\n      Gallery.height = 0;\n\n      // Clean up\n      cancelFullScreen();\n      document.location.hash = '_';\n      Gallery.dom.img.src = '';\n    },\n    show: function show(target) {\n      // Bubble up until we find the <a> that triggered the event\n      var link = target;\n      while (link.nodeName !== 'A') {\n        link = link.parentElement;\n      }\n\n      // Bubble up until we find the enclosing gallery\n      var gallery = target.parentElement;\n      while (gallery.className.indexOf('gallery') === -1) {\n        gallery = gallery.parentElement;\n      }\n\n      // Set up state\n      Gallery.id = gallery.id.replace(/^gallery-/, '');\n      Gallery.images = gallery.querySelectorAll('a');\n      Gallery.current = Array.prototype.indexOf.call(Gallery.images, link);\n      Gallery.initDom();\n      Gallery.update();\n\n      // Display the gallery\n      Gallery.dom.overlay.style.display = 'block';\n      Gallery.dom.outer.style.display = 'block';\n    },\n    showEvent: function showEvent(event) {\n      // Only left click\n      if (event.button !== 0 || event.ctrlKey || event.metaKey) {\n        return;\n      }\n      Gallery.show(event.target);\n\n      // Put it at the end so that it \"gracefully\" degrade if the browser sucks\n      event.preventDefault();\n    },\n    touchstart: function touchstart(event) {\n      if (event.touches.length === 2) {\n        event.preventDefault(); // Previene el zoom del navegador\n        Gallery.zooming = true;\n        Gallery.startDistance = Gallery.getDistance(event.touches[0], event.touches[1]);\n        Gallery.startScale = Gallery.currentScale || 1;\n      } else {\n        Gallery.zooming = false;\n        Gallery.touchStartX = event.touches[0].clientX;\n      }\n    },\n    touchmove: function touchmove(event) {\n      if (Gallery.zooming && event.touches.length === 2) {\n        event.preventDefault();\n        var newDistance = Gallery.getDistance(event.touches[0], event.touches[1]);\n        var scale = newDistance / Gallery.startDistance * Gallery.startScale;\n        Gallery.setImageScale(scale);\n      }\n    },\n    touchend: function touchend(event) {\n      if (Gallery.zooming) {\n        Gallery.zooming = false;\n        Gallery.currentScale = Gallery.dom.image.style.transform ? parseFloat(Gallery.dom.image.style.transform.replace('scale(', '').replace(')', '')) : 1;\n      } else {\n        var touchEndX = event.changedTouches[0].clientX;\n        var diff = Gallery.touchStartX - touchEndX;\n        if (Math.abs(diff) > 50) {\n          // Umbral para considerar un deslizamiento\n          if (diff > 0) {\n            Gallery.change(+1);\n          } else {\n            Gallery.change(-1);\n          }\n        }\n      }\n    },\n    getDistance: function getDistance(touch1, touch2) {\n      var dx = touch1.clientX - touch2.clientX;\n      var dy = touch1.clientY - touch2.clientY;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n    setImageScale: function setImageScale(scale) {\n      scale = Math.max(1, Math.min(scale, 3)); // Limita el zoom entre 1x y 3x\n      Gallery.dom.image.style.transform = 'scale(' + scale + ')';\n    }\n  };\n  document.addEventListener('DOMContentLoaded', Gallery.init);\n\n  // Utilities\n\n  // Full Screen\n\n  function canFullScreen() {\n    return document.body.webkitRequestFullScreen || document.body.requestFullScreen || document.body.mozRequestFullScreen;\n  }\n  function isFullScreen() {\n    return document.fullScreenElement || document.mozFullScreen || document.webkitIsFullScreen;\n  }\n  function goFullScreen(elem) {\n    if (elem.requestFullScreen) {\n      elem.requestFullScreen();\n    } else if (elem.mozRequestFullScreen) {\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullScreen) {\n      elem.webkitRequestFullScreen();\n    }\n  }\n  function cancelFullScreen() {\n    if (document.cancelFullScreen) {\n      document.cancelFullScreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    }\n  }\n\n  // Small DOM constructor\n\n  function e(name, className, parent) {\n    var elem = document.createElement(name);\n    parent.appendChild(elem);\n    if (className) {\n      elem.className = className;\n    }\n    return elem;\n  }\n\n  // Modulo that works with negative numbers\n\n  function mod(a, b) {\n    return (a % b + b) % b;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/gallery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/gallery.js"]();
/******/ 	
/******/ })()
;